{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines: ŸáŸÖÿ±ÿßŸá ÿ®ÿßÿ≤ÿßÿ± (Hamrah Bazar)\n\n## Design Approach\n\n**Reference-Based Approach**: Drawing inspiration from successful marketplace platforms:\n- **Primary Reference**: OLX/Dubizzle marketplace aesthetics - clean, trust-focused, content-dense\n- **Secondary References**: Airbnb (card design), Divar (Persian marketplace UX patterns)\n- **Key Principles**: Trust, clarity, easy scanning, mobile-first for emerging markets\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode:**\n- Primary: 200 85% 45% (Deep teal - trustworthy, professional)\n- Primary Hover: 200 85% 35%\n- Accent: 25 95% 53% (Warm orange for CTAs - energy, action)\n- Background: 0 0% 98% (Off-white)\n- Surface: 0 0% 100% (Pure white)\n- Text Primary: 220 15% 20%\n- Text Secondary: 220 10% 45%\n- Border: 220 15% 85%\n\n**Dark Mode:**\n- Primary: 200 70% 50%\n- Primary Hover: 200 70% 60%\n- Accent: 25 90% 58%\n- Background: 220 15% 12%\n- Surface: 220 15% 16%\n- Text Primary: 0 0% 95%\n- Text Secondary: 0 0% 70%\n- Border: 220 15% 25%\n\n### B. Typography\n\n**Font Families:**\n- Farsi/Pashto: 'Vazirmatn', 'Tahoma', sans-serif\n- English: 'Inter', 'system-ui', sans-serif\n\n**Scale:**\n- Hero: text-4xl (36px) md:text-5xl (48px)\n- H1: text-3xl (30px) md:text-4xl (36px)\n- H2: text-2xl (24px) md:text-3xl (30px)\n- H3: text-xl (20px)\n- Body: text-base (16px)\n- Small: text-sm (14px)\n- Tiny: text-xs (12px)\n\n### C. Layout System\n\n**Spacing Units**: Consistent use of 4, 6, 8, 12, 16, 24 (p-1, p-1.5, p-2, p-3, p-4, p-6)\n\n**Containers:**\n- Max width: max-w-7xl (1280px)\n- Padding: px-4 md:px-6 lg:px-8\n- Section spacing: py-8 md:py-12\n\n**Grid System:**\n- Categories: grid-cols-4 md:grid-cols-7 lg:grid-cols-14 (horizontal scroll on mobile)\n- Listings: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\n- City cards: grid-cols-2 md:grid-cols-3 lg:grid-cols-5\n\n### D. Component Library\n\n**Fixed Header:**\n- Height: h-16 (64px)\n- Position: fixed top-0 w-full z-50\n- Background: backdrop-blur-md with semi-transparent surface color\n- Shadow: subtle shadow-md\n- Contents: Logo (right/left based on RTL), Search bar (center), Auth buttons + Language switcher + Theme toggle\n- Back button: appears on secondary pages, replaces logo position\n\n**Navigation:**\n- Categories: Circular icons with labels (80x80px on mobile, 100x100px on desktop)\n- Icon style: Large emoji or Font Awesome solid icons\n- Hover: scale(1.05) with smooth transition\n- Active state: border-2 border-primary\n\n**Search Bar:**\n- Prominent in header and hero\n- Includes: text input + category dropdown + city dropdown\n- Border: 2px solid with rounded-xl\n- Focus state: border-primary with ring\n\n**Listing Cards:**\n- Aspect ratio: 4:3 image\n- Border: 1px border-border\n- Hover: shadow-lg transform scale(1.02)\n- Contents: Image, Title (font-semibold), Price (text-accent font-bold), Location + Time (text-secondary text-sm)\n- Corner badge: Category icon (top-left)\n\n**Category/City Circles:**\n- Shape: Circular containers\n- Size: w-20 h-20 md:w-24 md:h-24\n- Icon size: text-3xl md:text-4xl\n- Label: text-xs md:text-sm below icon\n- Background: gradient from surface to slight primary tint\n- Border: 2px border-border\n\n**CTA Buttons:**\n- Primary: bg-accent text-white rounded-lg px-6 py-3 font-semibold\n- Secondary: bg-primary text-white rounded-lg px-6 py-3 font-semibold\n- Outline: border-2 border-primary text-primary bg-transparent rounded-lg px-6 py-3 font-semibold\n\n**Forms:**\n- Input fields: border-2 border-border rounded-lg p-3 focus:border-primary\n- Labels: text-sm font-medium mb-2\n- Multi-step: Progress indicator at top showing step numbers\n- Image upload: Drag-drop area with preview thumbnails\n\n**Dashboard:**\n- Sidebar navigation (desktop) or bottom tabs (mobile)\n- Stats cards: Grid of 3-4 cards showing user metrics\n- My Listings: Table/cards view toggle\n\n### E. Animations\n\n**Minimal, purposeful animations:**\n- Page transitions: Subtle fade (200ms)\n- Card hover: scale transform (300ms ease)\n- Modal/Dialog: Slide up from bottom on mobile, fade center on desktop\n- Loading: Skeleton screens matching content layout\n\n## Specific Screens\n\n**Home Page:**\n- Fixed header (always visible)\n- Search hero: Large search bar with category/city dropdowns, h-48 md:h-64\n- Category circles: Horizontal scroll section with all 14 categories, at least 4 visible initially\n- Featured cities: Grid of 10 cities with 4+ sample listings each\n- Recent listings: Grid showing latest 20-30 ads\n- Footer: Links, social, contact info\n\n**Listing Detail:**\n- Back button in header\n- Image gallery: Main large image + thumbnail strip below\n- Seller info card: Avatar, name, phone (click to reveal), member since\n- Action buttons: Call, WhatsApp, Report\n- Description: Full text with proper spacing\n- Related listings: 4-6 similar items\n\n**Post Ad Flow:**\n- Multi-step form (3-4 steps)\n- Step 1: Category + City selection\n- Step 2: Title, Description, Price, Images (up to 8)\n- Step 3: Contact info verification\n- Step 4: Review + Publish\n- Progress indicator at top\n\n**Auth Pages:**\n- Centered card on gradient background\n- Phone input with country code (+93 default)\n- 2FA: 6-digit code input with auto-focus\n- No email required\n\n## RTL/LTR Handling\n\n- Use `dir` attribute on html element\n- Tailwind RTL classes: use `rtl:` and `ltr:` prefixes\n- Icons: Mirror directional icons (arrows, chevrons) in RTL\n- Numbers: Keep Western numerals in all languages\n\n## Images\n\n**Hero Section**: Not applicable for marketplace home - focus on quick search access\n\n**Listing Images:**\n- User-generated content\n- Required: At least 1 image per listing\n- Format: 4:3 aspect ratio, max 2MB\n- Placeholder: Generic category icon with soft gradient background\n\n**Category Icons:**\n- Use Font Awesome or similar icon library\n- Large, clear, universally recognizable\n- Examples: üöó (vehicles), üè† (real estate), üì± (electronics)\n\n**Trust Elements:**\n- Verified badge icon for verified sellers\n- Star ratings (future feature)\n- Member since badge","size_bytes":5967},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Hamrah Bazar - Online Marketplace for Afghanistan\n\n## Overview\n\nHamrah Bazar (ŸáŸÖÿ±ÿßŸá ÿ®ÿßÿ≤ÿßÿ±) is a multilingual online marketplace platform designed for Afghanistan, supporting Farsi (Dari), Pashto, and English. The application enables users to browse and post classified listings across various categories including vehicles, real estate, electronics, jewelry, clothing, and services. The platform emphasizes trust, clarity, and mobile-first design patterns inspired by successful marketplace platforms like OLX and Divar.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System:**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and development server for fast HMR (Hot Module Replacement)\n- Wouter for lightweight client-side routing instead of React Router\n\n**UI Component System:**\n- Radix UI primitives for accessible, unstyled components\n- shadcn/ui component library configured with \"new-york\" style\n- Tailwind CSS for utility-first styling with custom HSL-based color system\n- Support for light and dark themes with CSS variables\n\n**State Management:**\n- React Context API for global state (Language, Theme, Authentication)\n- TanStack Query (React Query) for server state management and caching\n- Local component state with React hooks\n\n**Internationalization:**\n- Custom LanguageContext supporting three languages: Farsi (fa), Pashto (ps), and English (en)\n- Bi-directional text support (RTL for Farsi/Pashto, LTR for English)\n- Translation keys stored in LanguageContext with fallback mechanism\n\n**Design System:**\n- Mobile-first responsive approach\n- Custom color palette with deep teal primary and warm orange accent colors\n- Gradient-based aesthetic for category and city selection circles\n- Vazirmatn font for Persian/Pashto, Inter for English\n\n### Backend Architecture\n\n**Runtime & Framework:**\n- Node.js with Express.js for the HTTP server\n- TypeScript throughout with ESM module system\n- Development server with custom logging middleware\n\n**API Design:**\n- RESTful API pattern (routes prefixed with `/api`)\n- Centralized route registration in `server/routes.ts`\n- Error handling middleware with status code propagation\n- JSON request/response with automatic parsing\n\n**Data Layer:**\n- Storage abstraction interface (`IStorage`) in `server/storage.ts`\n- In-memory implementation (`MemStorage`) for development/prototype\n- Prepared for Drizzle ORM integration with PostgreSQL\n- UUID-based primary keys using `gen_random_uuid()`\n\n**Database Schema (Drizzle ORM):**\n- `users` table: id, name, phone (unique), password, two-factor authentication fields\n- `listings` table: id, title, description, price, category, city, imageUrl, userId (foreign key), timestamps\n- Zod schema validation using `drizzle-zod` for type-safe inserts\n\n### Data Storage Solutions\n\n**Current Implementation:**\n- In-memory Map-based storage for rapid prototyping\n- Mock data generators for categories, cities, and listings\n\n**Planned Implementation:**\n- PostgreSQL database (configured via Neon serverless driver)\n- Drizzle ORM for type-safe database queries\n- Connection pooling via `@neondatabase/serverless`\n- Migration management through `drizzle-kit`\n\n**Session Management:**\n- Prepared for `connect-pg-simple` for PostgreSQL-backed sessions\n- Cookie-based session storage strategy\n\n### Authentication and Authorization\n\n**Authentication Strategy:**\n- Phone number-based authentication (Afghan context)\n- Password hashing (implementation pending)\n- Two-factor authentication support via SMS codes with expiry\n- Session persistence in localStorage (client-side, prototype phase)\n\n**Authorization:**\n- User context via AuthContext\n- Protected routes checking `isAuthenticated` status\n- User ID association with listings for ownership verification\n\n**Security Considerations:**\n- Credentials sent via JSON over HTTPS\n- Two-factor expiry mechanism prevents code reuse\n- Input validation via Zod schemas\n\n### External Dependencies\n\n**Third-Party Libraries:**\n- **Radix UI:** Comprehensive set of unstyled, accessible UI primitives (@radix-ui/react-*)\n- **TanStack Query:** Server state management with automatic caching and refetching\n- **Tailwind CSS:** Utility-first CSS framework with PostCSS processing\n- **Wouter:** Lightweight routing (alternative to React Router)\n- **date-fns:** Date manipulation and formatting\n- **Embla Carousel:** Touch-enabled carousel component\n- **cmdk:** Command palette component\n- **class-variance-authority:** Utility for managing component variants\n- **Lucide React:** Icon library\n\n**Database & ORM:**\n- **Drizzle ORM:** TypeScript ORM with schema-first approach\n- **@neondatabase/serverless:** PostgreSQL driver for Neon serverless database\n- **drizzle-zod:** Zod schema generation from Drizzle schemas\n\n**Development Tools:**\n- **Vite Plugins:** Runtime error overlay, dev banner, cartographer (Replit-specific)\n- **TSX:** TypeScript execution for development server\n- **esbuild:** Fast JavaScript bundler for production builds\n\n**Build & Deployment:**\n- Vite builds client to `dist/public`\n- esbuild bundles server to `dist/index.js`\n- Static file serving in production mode\n- Environment-specific configuration via `NODE_ENV`","size_bytes":5306},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use('/uploads', express.static(path.join(__dirname, '../public/uploads')));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2304},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertListingSchema, insertUserSchema } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: path.join(__dirname, '../public/uploads'),\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      cb(null, uniqueSuffix + path.extname(file.originalname));\n    }\n  }),\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|gif|webp/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n    if (mimetype && extname) {\n      return cb(null, true);\n    }\n    cb(new Error('Only image files are allowed!'));\n  },\n  limits: { fileSize: 5 * 1024 * 1024 }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { name, phone, password } = req.body;\n      \n      const existingUser = await storage.getUserByPhone(phone);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Phone number already registered\" });\n      }\n      \n      const hashedPassword = await bcrypt.hash(password, 10);\n      \n      const user = await storage.createUser({\n        name,\n        phone,\n        password: hashedPassword,\n      });\n      \n      const { password: _, ...userWithoutPassword } = user;\n      res.status(201).json({ user: userWithoutPassword });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { phone, password } = req.body;\n      \n      const user = await storage.getUserByPhone(phone);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid phone or password\" });\n      }\n      \n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid phone or password\" });\n      }\n      \n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/upload\", upload.single('image'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n      const imageUrl = `/uploads/${req.file.filename}`;\n      res.json({ imageUrl });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/listings\", async (req, res) => {\n    try {\n      const { category, city, query } = req.query;\n      \n      if (query || category || city) {\n        const listings = await storage.searchListings(\n          query as string || '',\n          category as string,\n          city as string\n        );\n        return res.json(listings);\n      }\n      \n      if (category && category !== 'all') {\n        const listings = await storage.getListingsByCategory(category as string);\n        return res.json(listings);\n      }\n      \n      if (city) {\n        const listings = await storage.getListingsByCity(city as string);\n        return res.json(listings);\n      }\n      \n      const listings = await storage.getAllListings();\n      res.json(listings);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/listings/:id\", async (req, res) => {\n    try {\n      const listing = await storage.getListing(req.params.id);\n      if (!listing) {\n        return res.status(404).json({ message: \"Listing not found\" });\n      }\n      res.json(listing);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/listings\", async (req, res) => {\n    try {\n      const validatedData = insertListingSchema.parse(req.body);\n      const userId = req.body.userId || 'mock-user-123';\n      \n      const listing = await storage.createListing(validatedData, userId);\n      res.status(201).json(listing);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/listings/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const listing = await storage.updateListing(id, req.body);\n      \n      if (!listing) {\n        return res.status(404).json({ message: \"Listing not found\" });\n      }\n      \n      res.json(listing);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/listings/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteListing(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Listing not found\" });\n      }\n      \n      res.json({ message: \"Listing deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/user/:userId/listings\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const listings = await storage.getUserListings(userId);\n      res.json(listings);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/user/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":6119},"server/storage.ts":{"content":"import { type User, type InsertUser, type Listing, type InsertListing, users, listings } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, like, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByPhone(phone: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  getListing(id: string): Promise<Listing | undefined>;\n  getAllListings(): Promise<Listing[]>;\n  getListingsByCategory(category: string): Promise<Listing[]>;\n  getListingsByCity(city: string): Promise<Listing[]>;\n  searchListings(query: string, category?: string, city?: string): Promise<Listing[]>;\n  getUserListings(userId: string): Promise<Listing[]>;\n  createListing(listing: InsertListing, userId: string): Promise<Listing>;\n  updateListing(id: string, listing: Partial<InsertListing>): Promise<Listing | undefined>;\n  deleteListing(id: string): Promise<boolean>;\n}\n\nexport class DbStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.phone, phone)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async getListing(id: string): Promise<Listing | undefined> {\n    const result = await db.select().from(listings).where(eq(listings.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getAllListings(): Promise<Listing[]> {\n    return db.select().from(listings).orderBy(desc(listings.createdAt));\n  }\n\n  async getListingsByCategory(category: string): Promise<Listing[]> {\n    return db.select().from(listings).where(eq(listings.category, category)).orderBy(desc(listings.createdAt));\n  }\n\n  async getListingsByCity(city: string): Promise<Listing[]> {\n    return db.select().from(listings).where(eq(listings.city, city)).orderBy(desc(listings.createdAt));\n  }\n\n  async searchListings(query: string, category?: string, city?: string): Promise<Listing[]> {\n    const conditions = [];\n    \n    if (query) {\n      conditions.push(\n        or(\n          like(listings.title, `%${query}%`),\n          like(listings.description, `%${query}%`)\n        )\n      );\n    }\n    \n    if (category && category !== 'all') {\n      conditions.push(eq(listings.category, category));\n    }\n    \n    if (city) {\n      conditions.push(eq(listings.city, city));\n    }\n\n    if (conditions.length === 0) {\n      return this.getAllListings();\n    }\n\n    return db.select().from(listings).where(and(...conditions)).orderBy(desc(listings.createdAt));\n  }\n\n  async getUserListings(userId: string): Promise<Listing[]> {\n    return db.select().from(listings).where(eq(listings.userId, userId)).orderBy(desc(listings.createdAt));\n  }\n\n  async createListing(insertListing: InsertListing, userId: string): Promise<Listing> {\n    const result = await db.insert(listings).values({\n      ...insertListing,\n      userId,\n    }).returning();\n    return result[0];\n  }\n\n  async updateListing(id: string, listing: Partial<InsertListing>): Promise<Listing | undefined> {\n    const result = await db.update(listings)\n      .set(listing)\n      .where(eq(listings.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteListing(id: string): Promise<boolean> {\n    const result = await db.delete(listings).where(eq(listings.id, id)).returning();\n    return result.length > 0;\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":3704},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  twoFactorCode: text(\"two_factor_code\"),\n  twoFactorExpiry: timestamp(\"two_factor_expiry\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const listings = pgTable(\"listings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  price: integer(\"price\").notNull(),\n  category: text(\"category\").notNull(),\n  city: text(\"city\").notNull(),\n  imageUrl: text(\"image_url\"),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  twoFactorCode: true,\n  twoFactorExpiry: true,\n});\n\nexport const insertListingSchema = createInsertSchema(listings).omit({\n  id: true,\n  createdAt: true,\n  userId: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertListing = z.infer<typeof insertListingSchema>;\nexport type Listing = typeof listings.$inferSelect;\n\nexport const categories = [\n  { id: \"vehicles\", nameFA: \"Ÿàÿ≥ÿß€åÿ∑ ŸÜŸÇŸÑ€åŸá\", namePS: \"ŸÖŸàŸºÿ±ŸàŸÜŸá\", nameEN: \"Vehicles\", icon: \"üöó\" },\n  { id: \"realestate\", nameFA: \"ÿßŸÖŸÑÿß⁄©\", namePS: \"ŸÖŸÑ⁄©€åÿ™\", nameEN: \"Real Estate\", icon: \"üè†\" },\n  { id: \"electronics\", nameFA: \"ÿßŸÑ⁄©ÿ™ÿ±ŸàŸÜ€å⁄©€å\", namePS: \"ÿ®ÿ±€å⁄öŸÜÿß€å€å\", nameEN: \"Electronics\", icon: \"üì±\" },\n  { id: \"jewelry\", nameFA: \"ÿ¨ŸàÿßŸáÿ±ÿßÿ™\", namePS: \"⁄´ÿß⁄º€ê\", nameEN: \"Jewelry\", icon: \"üíé\" },\n  { id: \"mens-clothes\", nameFA: \"ŸÑÿ®ÿßÿ≥ ŸÖÿ±ÿØÿßŸÜŸá\", namePS: \"ŸÜÿßÿ±€åŸÜŸá ÿ¨ÿßŸÖ€ê\", nameEN: \"Men's Clothes\", icon: \"üëî\" },\n  { id: \"womens-clothes\", nameFA: \"ŸÑÿ®ÿßÿ≥ ÿ≤ŸÜÿßŸÜŸá\", namePS: \"⁄ö⁄Å€åŸÜŸá ÿ¨ÿßŸÖ€ê\", nameEN: \"Women's Clothes\", icon: \"üëó\" },\n  { id: \"kids-clothes\", nameFA: \"ŸÑÿ®ÿßÿ≥ ÿßÿ∑ŸÅÿßŸÑ\", namePS: \"ŸÖÿßÿ¥ŸàŸÖÿßŸÜŸà ÿ¨ÿßŸÖ€ê\", nameEN: \"Kids' Clothes\", icon: \"üë∂\" },\n  { id: \"books\", nameFA: \"ÿ¢ŸÖŸàÿ≤ÿ¥\", namePS: \"ÿ≤ÿØŸá ⁄©⁄ìŸá\", nameEN: \"Education\", icon: \"üìö\" },\n  { id: \"kids\", nameFA: \"ŸÑŸàÿßÿ≤ŸÖ ⁄©ŸàÿØ⁄©\", namePS: \"ÿØ ŸÖÿßÿ¥ŸàŸÖ ÿ≥ÿßŸÖÿßŸÜ\", nameEN: \"Kids' Items\", icon: \"üß∏\" },\n  { id: \"home\", nameFA: \"ŸÑŸàÿßÿ≤ŸÖ ÿÆÿßŸÜ⁄Ø€å\", namePS: \"ÿØ ⁄©Ÿàÿ± ÿ≥ÿßŸÖÿßŸÜ\", nameEN: \"Home Items\", icon: \"üõãÔ∏è\" },\n  { id: \"jobs\", nameFA: \"ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ\", namePS: \"ÿØŸÜÿØŸá\", nameEN: \"Jobs\", icon: \"üíº\" },\n  { id: \"services\", nameFA: \"ÿÆÿØŸÖÿßÿ™\", namePS: \"ÿÆÿØŸÖÿßÿ™\", nameEN: \"Services\", icon: \"üõ†Ô∏è\" },\n  { id: \"games\", nameFA: \"ÿ≥ÿ±⁄Øÿ±ŸÖ€å\", namePS: \"ÿ™ŸÅÿ±€åÿ≠\", nameEN: \"Entertainment\", icon: \"üéÆ\" },\n  { id: \"sports\", nameFA: \"Ÿàÿ±ÿ≤ÿ¥€å\", namePS: \"Ÿàÿ±ÿ≤ÿ¥\", nameEN: \"Sports\", icon: \"‚öΩ\" },\n] as const;\n\nexport const cities = [\n  { id: \"kabul\", nameFA: \"⁄©ÿßÿ®ŸÑ\", namePS: \"⁄©ÿßÿ®ŸÑ\", nameEN: \"Kabul\", icon: \"üèõÔ∏è\" },\n  { id: \"herat\", nameFA: \"Ÿáÿ±ÿßÿ™\", namePS: \"Ÿáÿ±ÿßÿ™\", nameEN: \"Herat\", icon: \"üïå\" },\n  { id: \"balkh\", nameFA: \"ÿ®ŸÑÿÆ\", namePS: \"ÿ®ŸÑÿÆ\", nameEN: \"Balkh\", icon: \"üè∫\" },\n  { id: \"kandahar\", nameFA: \"ŸÇŸÜÿØŸáÿßÿ±\", namePS: \"⁄©ŸÜÿØŸáÿßÿ±\", nameEN: \"Kandahar\", icon: \"üèúÔ∏è\" },\n  { id: \"nangarhar\", nameFA: \"ŸÜŸÜ⁄Øÿ±Ÿáÿßÿ±\", namePS: \"ŸÜŸÜ⁄´ÿ±Ÿáÿßÿ±\", nameEN: \"Nangarhar\", icon: \"üèîÔ∏è\" },\n  { id: \"ghazni\", nameFA: \"ÿ∫ÿ≤ŸÜ€å\", namePS: \"ÿ∫ÿ≤ŸÜŸä\", nameEN: \"Ghazni\", icon: \"üè∞\" },\n  { id: \"bamyan\", nameFA: \"ÿ®ÿßŸÖ€åÿßŸÜ\", namePS: \"ÿ®ÿßŸÖ€åÿßŸÜ\", nameEN: \"Bamyan\", icon: \"‚õ∞Ô∏è\" },\n  { id: \"farah\", nameFA: \"ŸÅÿ±ÿßŸá\", namePS: \"ŸÅÿ±ÿßŸá\", nameEN: \"Farah\", icon: \"üåæ\" },\n  { id: \"kunduz\", nameFA: \"⁄©ŸÜÿØÿ≤\", namePS: \"⁄©ŸÜÿØÿ≤\", nameEN: \"Kunduz\", icon: \"üåø\" },\n  { id: \"badakhshan\", nameFA: \"ÿ®ÿØÿÆÿ¥ÿßŸÜ\", namePS: \"ÿ®ÿØÿÆÿ¥ÿßŸÜ\", nameEN: \"Badakhshan\", icon: \"üóª\" },\n  { id: \"helmand\", nameFA: \"ŸáŸÑŸÖŸÜÿØ\", namePS: \"ŸáŸÑŸÖŸÜÿØ\", nameEN: \"Helmand\", icon: \"üèúÔ∏è\" },\n  { id: \"paktia\", nameFA: \"Ÿæ⁄©ÿ™€åÿß\", namePS: \"Ÿæ⁄©ÿ™€åÿß\", nameEN: \"Paktia\", icon: \"üèîÔ∏è\" },\n  { id: \"paktika\", nameFA: \"Ÿæ⁄©ÿ™€å⁄©ÿß\", namePS: \"Ÿæ⁄©ÿ™€å⁄©ÿß\", nameEN: \"Paktika\", icon: \"‚õ∞Ô∏è\" },\n  { id: \"khost\", nameFA: \"ÿÆŸàÿ≥ÿ™\", namePS: \"ÿÆŸàÿ≥ÿ™\", nameEN: \"Khost\", icon: \"üå≤\" },\n  { id: \"logar\", nameFA: \"ŸÑŸà⁄Øÿ±\", namePS: \"ŸÑŸà⁄´ÿ±\", nameEN: \"Logar\", icon: \"üåæ\" },\n  { id: \"wardak\", nameFA: \"ŸÖ€åÿØÿßŸÜ Ÿàÿ±ÿØ⁄©\", namePS: \"Ÿàÿ±ÿØ⁄©\", nameEN: \"Wardak\", icon: \"‚õ∞Ô∏è\" },\n  { id: \"kapisa\", nameFA: \"⁄©ÿßŸæ€åÿ≥ÿß\", namePS: \"⁄©ÿßŸæ€åÿ≥ÿß\", nameEN: \"Kapisa\", icon: \"üèîÔ∏è\" },\n  { id: \"parwan\", nameFA: \"Ÿæÿ±ŸàÿßŸÜ\", namePS: \"Ÿæÿ±ŸàÿßŸÜ\", nameEN: \"Parwan\", icon: \"üèîÔ∏è\" },\n  { id: \"panjshir\", nameFA: \"ŸæŸÜÿ¨ÿ¥€åÿ±\", namePS: \"ŸæŸÜÿ¨ÿ¥Ÿäÿ±\", nameEN: \"Panjshir\", icon: \"üóª\" },\n  { id: \"baghlan\", nameFA: \"ÿ®ÿ∫ŸÑÿßŸÜ\", namePS: \"ÿ®ÿ∫ŸÑÿßŸÜ\", nameEN: \"Baghlan\", icon: \"üåø\" },\n  { id: \"takhar\", nameFA: \"ÿ™ÿÆÿßÿ±\", namePS: \"ÿ™ÿÆÿßÿ±\", nameEN: \"Takhar\", icon: \"üèîÔ∏è\" },\n  { id: \"samangan\", nameFA: \"ÿ≥ŸÖŸÜ⁄ØÿßŸÜ\", namePS: \"ÿ≥ŸÖŸÜ⁄´ÿßŸÜ\", nameEN: \"Samangan\", icon: \"üèõÔ∏è\" },\n  { id: \"sari-pul\", nameFA: \"ÿ≥ÿ±ŸæŸÑ\", namePS: \"ÿ≥ÿ±ŸæŸÑ\", nameEN: \"Sar-e Pol\", icon: \"üåæ\" },\n  { id: \"jawzjan\", nameFA: \"ÿ¨Ÿàÿ≤ÿ¨ÿßŸÜ\", namePS: \"ÿ¨Ÿàÿ≤ÿ¨ÿßŸÜ\", nameEN: \"Jawzjan\", icon: \"üèúÔ∏è\" },\n  { id: \"faryab\", nameFA: \"ŸÅÿßÿ±€åÿßÿ®\", namePS: \"ŸÅÿßÿ±€åÿßÿ®\", nameEN: \"Faryab\", icon: \"üåæ\" },\n  { id: \"badghis\", nameFA: \"ÿ®ÿßÿØÿ∫€åÿ≥\", namePS: \"ÿ®ÿßÿØÿ∫€åÿ≥\", nameEN: \"Badghis\", icon: \"üèúÔ∏è\" },\n  { id: \"ghor\", nameFA: \"ÿ∫Ÿàÿ±\", namePS: \"ÿ∫Ÿàÿ±\", nameEN: \"Ghor\", icon: \"‚õ∞Ô∏è\" },\n  { id: \"daykundi\", nameFA: \"ÿØÿß€å⁄©ŸÜÿØ€å\", namePS: \"ÿØÿß€å⁄©ŸÜÿØ€å\", nameEN: \"Daykundi\", icon: \"üèîÔ∏è\" },\n  { id: \"uruzgan\", nameFA: \"ÿßÿ±ÿ≤⁄ØÿßŸÜ\", namePS: \"ÿßÿ±ÿ≤⁄´ÿßŸÜ\", nameEN: \"Uruzgan\", icon: \"üèúÔ∏è\" },\n  { id: \"zabul\", nameFA: \"ÿ≤ÿßÿ®ŸÑ\", namePS: \"ÿ≤ÿßÿ®ŸÑ\", nameEN: \"Zabul\", icon: \"üèúÔ∏è\" },\n  { id: \"nimroz\", nameFA: \"ŸÜ€åŸÖÿ±Ÿàÿ≤\", namePS: \"ŸÜ€åŸÖÿ±Ÿàÿ≤\", nameEN: \"Nimroz\", icon: \"üèúÔ∏è\" },\n  { id: \"laghman\", nameFA: \"ŸÑÿ∫ŸÖÿßŸÜ\", namePS: \"ŸÑÿ∫ŸÖÿßŸÜ\", nameEN: \"Laghman\", icon: \"üå≤\" },\n  { id: \"kunar\", nameFA: \"⁄©ŸÜÿ±\", namePS: \"⁄©ŸÜ⁄ì\", nameEN: \"Kunar\", icon: \"üèîÔ∏è\" },\n  { id: \"nuristan\", nameFA: \"ŸÜŸàÿ±ÿ≥ÿ™ÿßŸÜ\", namePS: \"ŸÜŸàÿ±ÿ≥ÿ™ÿßŸÜ\", nameEN: \"Nuristan\", icon: \"üóª\" },\n] as const;\n","size_bytes":6534},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/contexts/LanguageContext\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport HomePage from \"@/pages/HomePage\";\nimport ListingDetailPage from \"@/pages/ListingDetailPage\";\nimport AuthPage from \"@/pages/AuthPage\";\nimport CreateListingPage from \"@/pages/CreateListingPage\";\nimport DashboardPage from \"@/pages/DashboardPage\";\nimport EditListingPage from \"@/pages/EditListingPage\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/listing/:id\" component={ListingDetailPage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/create-listing\" component={CreateListingPage} />\n      <Route path=\"/dashboard\" component={DashboardPage} />\n      <Route path=\"/edit-listing/:id\" component={EditListingPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <LanguageProvider>\n          <AuthProvider>\n            <TooltipProvider>\n              <Toaster />\n              <Router />\n            </TooltipProvider>\n          </AuthProvider>\n        </LanguageProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1640},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 15% 20%;\n\n  --border: 220 15% 85%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 15% 20%;\n\n  --card-border: 220 15% 92%;\n\n  --sidebar: 0 0% 97%;\n\n  --sidebar-foreground: 220 15% 20%;\n\n  --sidebar-border: 220 15% 90%;\n\n  --sidebar-primary: 200 85% 45%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 200 15% 90%;\n\n  --sidebar-accent-foreground: 220 15% 25%;\n\n  --sidebar-ring: 200 85% 45%;\n\n  --popover: 0 0% 99%;\n\n  --popover-foreground: 220 15% 20%;\n\n  --popover-border: 220 15% 88%;\n\n  --primary: 200 85% 45%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 10% 92%;\n\n  --secondary-foreground: 220 15% 25%;\n\n  --muted: 220 10% 94%;\n\n  --muted-foreground: 220 10% 45%;\n\n  --accent: 25 95% 53%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 15% 70%;\n  --ring: 200 85% 45%;\n  --chart-1: 200 85% 40%;\n  --chart-2: 25 95% 48%;\n  --chart-3: 280 75% 45%;\n  --chart-4: 140 70% 40%;\n  --chart-5: 45 90% 45%;\n\n  --font-sans: 'Vazirmatn', 'Inter', 'Tahoma', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 20% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 20% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 15% 20% / 0.06), 0px 1px 2px -1px hsl(220 15% 20% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(220 15% 20% / 0.08), 0px 2px 4px -1px hsl(220 15% 20% / 0.04);\n  --shadow-md: 0px 6px 12px -2px hsl(220 15% 20% / 0.10), 0px 3px 7px -3px hsl(220 15% 20% / 0.05);\n  --shadow-lg: 0px 10px 24px -3px hsl(220 15% 20% / 0.12), 0px 8px 16px -4px hsl(220 15% 20% / 0.06);\n  --shadow-xl: 0px 20px 40px -4px hsl(220 15% 20% / 0.15), 0px 12px 24px -6px hsl(220 15% 20% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 15% 20% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 12%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 220 15% 25%;\n\n  --card: 220 15% 16%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 220 15% 22%;\n\n  --sidebar: 220 15% 14%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 220 15% 20%;\n\n  --sidebar-primary: 200 70% 50%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 15% 20%;\n\n  --sidebar-accent-foreground: 0 0% 90%;\n\n  --sidebar-ring: 200 70% 50%;\n\n  --popover: 220 15% 18%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 15% 24%;\n\n  --primary: 200 70% 50%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 15% 22%;\n\n  --secondary-foreground: 0 0% 90%;\n\n  --muted: 220 15% 20%;\n\n  --muted-foreground: 0 0% 70%;\n\n  --accent: 25 90% 58%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 75% 45%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 15% 35%;\n  --ring: 200 70% 50%;\n  --chart-1: 200 70% 55%;\n  --chart-2: 25 90% 58%;\n  --chart-3: 280 65% 60%;\n  --chart-4: 140 60% 55%;\n  --chart-5: 45 85% 58%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.25);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.30);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.25), 0px 1px 2px -1px hsl(0 0% 0% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.30), 0px 2px 4px -1px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.35), 0px 3px 7px -3px hsl(0 0% 0% / 0.25);\n  --shadow-lg: 0px 10px 24px -3px hsl(0 0% 0% / 0.40), 0px 8px 16px -4px hsl(0 0% 0% / 0.30);\n  --shadow-xl: 0px 20px 40px -4px hsl(0 0% 0% / 0.45), 0px 12px 24px -6px hsl(0 0% 0% / 0.35);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11023},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CategoryCircle.tsx":{"content":"import { useLanguage } from '@/contexts/LanguageContext';\nimport { categories } from '@shared/schema';\n\ninterface CategoryCircleProps {\n  category: typeof categories[number];\n  onClick?: () => void;\n}\n\nexport default function CategoryCircle({ category, onClick }: CategoryCircleProps) {\n  const { language } = useLanguage();\n\n  const getName = () => {\n    if (language === 'fa') return category.nameFA;\n    if (language === 'ps') return category.namePS;\n    return category.nameEN;\n  };\n\n  return (\n    <div\n      onClick={onClick}\n      className=\"flex flex-col items-center gap-2 cursor-pointer group min-w-[80px] md:min-w-[100px]\"\n      data-testid={`category-${category.id}`}\n    >\n      <div className=\"w-20 h-20 md:w-24 md:h-24 rounded-full bg-gradient-to-br from-card to-primary/10 border-2 border-border flex items-center justify-center text-3xl md:text-4xl transition-all duration-300 hover-elevate active-elevate-2 group-hover:scale-105 group-hover:border-primary shadow-sm\">\n        {category.icon}\n      </div>\n      <span className=\"text-xs md:text-sm font-medium text-center text-foreground group-hover:text-primary transition-colors\">\n        {getName()}\n      </span>\n    </div>\n  );\n}\n","size_bytes":1202},"client/src/components/CityCircle.tsx":{"content":"import { useLanguage } from '@/contexts/LanguageContext';\nimport { cities } from '@shared/schema';\n\ninterface CityCircleProps {\n  city: typeof cities[number];\n  onClick?: () => void;\n}\n\nexport default function CityCircle({ city, onClick }: CityCircleProps) {\n  const { language } = useLanguage();\n\n  const getName = () => {\n    if (language === 'fa') return city.nameFA;\n    if (language === 'ps') return city.namePS;\n    return city.nameEN;\n  };\n\n  return (\n    <div\n      onClick={onClick}\n      className=\"flex flex-col items-center gap-2 cursor-pointer group min-w-[80px] md:min-w-[100px]\"\n      data-testid={`city-${city.id}`}\n    >\n      <div className=\"w-20 h-20 md:w-24 md:h-24 rounded-full bg-gradient-to-br from-card to-accent/10 border-2 border-border flex items-center justify-center text-3xl md:text-4xl transition-all duration-300 hover-elevate active-elevate-2 group-hover:scale-105 group-hover:border-accent shadow-sm\">\n        {city.icon}\n      </div>\n      <span className=\"text-xs md:text-sm font-medium text-center text-foreground group-hover:text-accent transition-colors\">\n        {getName()}\n      </span>\n    </div>\n  );\n}\n","size_bytes":1147},"client/src/components/FixedHeader.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { ArrowRight, Home, LogIn, LogOut, Moon, Sun, Globe, LayoutDashboard, Plus } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useTheme } from '@/contexts/ThemeContext';\nimport { useAuth } from '@/contexts/AuthContext';\n\ninterface FixedHeaderProps {\n  showBackButton?: boolean;\n}\n\nexport default function FixedHeader({ showBackButton = false }: FixedHeaderProps) {\n  const [location, navigate] = useLocation();\n  const { language, setLanguage, t, dir } = useLanguage();\n  const { theme, toggleTheme } = useTheme();\n  const { user, logout } = useAuth();\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-50 bg-card/80 backdrop-blur-md border-b border-border shadow-sm\">\n      <div className=\"container mx-auto px-4 h-16 flex items-center justify-between gap-4\" style={{ direction: dir }}>\n        <div className=\"flex items-center gap-3 order-1\">\n          {showBackButton && location !== '/' ? (\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={() => navigate('/')}\n              data-testid=\"button-back\"\n              className=\"hover-elevate active-elevate-2\"\n            >\n              <ArrowRight className={`w-5 h-5 ${dir === 'ltr' ? 'rotate-180' : ''}`} />\n            </Button>\n          ) : (\n            <Link href=\"/\">\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                data-testid=\"button-home\"\n                className=\"hover-elevate active-elevate-2\"\n              >\n                <Home className=\"w-5 h-5\" />\n              </Button>\n            </Link>\n          )}\n          <Link href=\"/\">\n            <h1 className=\"text-lg md:text-xl font-bold text-primary cursor-pointer hover-elevate px-2 py-1 rounded-md\" data-testid=\"text-app-name\">\n              {t('appName')}\n            </h1>\n          </Link>\n        </div>\n\n        <div className=\"flex items-center gap-2 order-2\">\n          <Select value={language} onValueChange={(value) => setLanguage(value as any)}>\n            <SelectTrigger className=\"w-[100px] md:w-[120px]\" data-testid=\"select-language\">\n              <Globe className=\"w-4 h-4 ltr:mr-2 rtl:ml-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"fa\" data-testid=\"option-language-fa\">ŸÅÿßÿ±ÿ≥€å</SelectItem>\n              <SelectItem value=\"ps\" data-testid=\"option-language-ps\">Ÿæÿ¥ÿ™Ÿà</SelectItem>\n              <SelectItem value=\"en\" data-testid=\"option-language-en\">English</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={toggleTheme}\n            data-testid=\"button-theme-toggle\"\n            className=\"hover-elevate active-elevate-2\"\n          >\n            {theme === 'dark' ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n          </Button>\n\n          {user ? (\n            <>\n              <Link href=\"/create-listing\">\n                <Button variant=\"default\" size=\"sm\" data-testid=\"button-create-listing\" className=\"hidden md:flex\">\n                  <Plus className=\"w-4 h-4 ltr:mr-2 rtl:ml-2\" />\n                  {language === 'fa' ? 'ÿ´ÿ®ÿ™ ÿ¢⁄ØŸá€å' : language === 'ps' ? 'ÿßÿπŸÑÿßŸÜ ÿ´ÿ®ÿ™' : 'Post Ad'}\n                </Button>\n              </Link>\n              <Link href=\"/create-listing\">\n                <Button variant=\"default\" size=\"icon\" data-testid=\"button-create-listing-mobile\" className=\"md:hidden\">\n                  <Plus className=\"w-5 h-5\" />\n                </Button>\n              </Link>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full\" data-testid=\"button-user-menu\">\n                    <Avatar className=\"w-8 h-8\">\n                      <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                        {user.name.charAt(0).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align={dir === 'rtl' ? 'start' : 'end'} className=\"w-48\">\n                  <DropdownMenuItem onClick={() => navigate('/dashboard')} data-testid=\"menu-item-dashboard\">\n                    <LayoutDashboard className=\"w-4 h-4 ltr:mr-2 rtl:ml-2\" />\n                    {language === 'fa' ? 'ÿ¢⁄ØŸá€å‚ÄåŸáÿß€å ŸÖŸÜ' : language === 'ps' ? 'ÿ≤ŸÖÿß ÿßÿπŸÑÿßŸÜŸàŸÜŸá' : 'My Listings'}\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={logout} data-testid=\"menu-item-logout\">\n                    <LogOut className=\"w-4 h-4 ltr:mr-2 rtl:ml-2\" />\n                    {language === 'fa' ? 'ÿÆÿ±Ÿàÿ¨' : language === 'ps' ? 'Ÿàÿ™ŸÑ' : 'Logout'}\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </>\n          ) : (\n            <>\n              <Link href=\"/auth\">\n                <Button variant=\"default\" size=\"sm\" data-testid=\"button-login\" className=\"hidden md:flex\">\n                  <LogIn className=\"w-4 h-4 ltr:mr-2 rtl:ml-2\" />\n                  {t('login')}\n                </Button>\n              </Link>\n              <Link href=\"/auth\">\n                <Button variant=\"default\" size=\"icon\" data-testid=\"button-login-mobile\" className=\"md:hidden\">\n                  <LogIn className=\"w-5 h-5\" />\n                </Button>\n              </Link>\n            </>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":6073},"client/src/components/Footer.tsx":{"content":"import { Link } from 'wouter';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { Mail, Phone, MapPin } from 'lucide-react';\n\nexport default function Footer() {\n  const { t, dir, language } = useLanguage();\n  const currentYear = new Date().getFullYear();\n\n  const getFooterText = (key: 'description' | 'quickLinks') => {\n    if (key === 'description') {\n      if (language === 'fa') return 'ÿ®ÿ≤ÿ±⁄Øÿ™ÿ±€åŸÜ ÿ®ÿßÿ≤ÿßÿ± ÿ¢ŸÜŸÑÿß€åŸÜ ÿßŸÅÿ∫ÿßŸÜÿ≥ÿ™ÿßŸÜ ÿ®ÿ±ÿß€å ÿÆÿ±€åÿØ Ÿà ŸÅÿ±Ÿàÿ¥';\n      if (language === 'ps') return 'ÿØ ÿßŸÅÿ∫ÿßŸÜÿ≥ÿ™ÿßŸÜ ÿ™ÿ±ŸºŸàŸÑŸà ŸÑŸà€å ÿ¢ŸÜŸÑÿß€åŸÜ ÿ®ÿßÿ≤ÿßÿ± ÿØ Ÿæ€åÿ±ŸàÿØŸÑŸà ÿßŸà ÿÆÿ±⁄ÖŸÑÿßŸà ŸÑŸæÿßÿ±Ÿá';\n      return 'Afghanistan\\'s largest online marketplace for buying and selling';\n    }\n    if (key === 'quickLinks') {\n      if (language === 'fa') return 'ŸÑ€åŸÜ⁄©‚ÄåŸáÿß€å ŸÖŸÅ€åÿØ';\n      if (language === 'ps') return '⁄´⁄ìŸÜÿØŸä ŸÑ€åŸÜ⁄©ŸàŸÜŸá';\n      return 'Quick Links';\n    }\n  };\n\n  return (\n    <footer className=\"bg-card border-t border-border mt-auto\">\n      <div className=\"container mx-auto px-4 py-8\" style={{ direction: dir }}>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-bold text-primary\" data-testid=\"text-footer-title\">\n              {t('appName')}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {getFooterText('description')}\n            </p>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold\" data-testid=\"text-footer-links-title\">\n              {getFooterText('quickLinks')}\n            </h4>\n            <nav className=\"flex flex-col gap-2\">\n              <Link href=\"/\">\n                <span className=\"text-sm text-muted-foreground hover:text-foreground transition-colors hover-elevate px-2 py-1 rounded-md inline-block cursor-pointer\" data-testid=\"link-footer-home\">\n                  {t('home')}\n                </span>\n              </Link>\n              <a href=\"#about\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors hover-elevate px-2 py-1 rounded-md inline-block\" data-testid=\"link-footer-about\">\n                {t('aboutUs')}\n              </a>\n              <a href=\"#terms\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors hover-elevate px-2 py-1 rounded-md inline-block\" data-testid=\"link-footer-terms\">\n                {t('termsOfService')}\n              </a>\n              <a href=\"#privacy\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors hover-elevate px-2 py-1 rounded-md inline-block\" data-testid=\"link-footer-privacy\">\n                {t('privacyPolicy')}\n              </a>\n            </nav>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold\" data-testid=\"text-footer-contact-title\">\n              {t('contactUs')}\n            </h4>\n            <div className=\"flex flex-col gap-3 text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-2\">\n                <Phone className=\"w-4 h-4\" />\n                <span data-testid=\"text-footer-phone\">+93 700 000 000</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Mail className=\"w-4 h-4\" />\n                <span data-testid=\"text-footer-email\">info@hamrahbazar.af</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <MapPin className=\"w-4 h-4\" />\n                <span data-testid=\"text-footer-location\">\n                  {language === 'fa' ? '⁄©ÿßÿ®ŸÑÿå ÿßŸÅÿ∫ÿßŸÜÿ≥ÿ™ÿßŸÜ' : language === 'ps' ? '⁄©ÿßÿ®ŸÑÿå ÿßŸÅÿ∫ÿßŸÜÿ≥ÿ™ÿßŸÜ' : 'Kabul, Afghanistan'}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border mt-8 pt-6 text-center\">\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-footer-copyright\">\n            ¬© {currentYear} {t('appName')} - {t('allRightsReserved')}\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4154},"client/src/components/ListingCard.tsx":{"content":"import { useLanguage } from '@/contexts/LanguageContext';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { categories, cities } from '@shared/schema';\nimport { MapPin, Clock } from 'lucide-react';\n\ninterface ListingCardProps {\n  id: string;\n  title: string;\n  price: number;\n  category: string;\n  city: string;\n  imageUrl?: string;\n  createdAt: string;\n  onClick?: () => void;\n}\n\nexport default function ListingCard({\n  id,\n  title,\n  price,\n  category,\n  city,\n  imageUrl,\n  createdAt,\n  onClick,\n}: ListingCardProps) {\n  const { t, language } = useLanguage();\n\n  const getCategoryName = () => {\n    const cat = categories.find(c => c.id === category);\n    if (!cat) return category;\n    if (language === 'fa') return cat.nameFA;\n    if (language === 'ps') return cat.namePS;\n    return cat.nameEN;\n  };\n\n  const getCityName = () => {\n    const cit = cities.find(c => c.id === city);\n    if (!cit) return city;\n    if (language === 'fa') return cit.nameFA;\n    if (language === 'ps') return cit.namePS;\n    return cit.nameEN;\n  };\n\n  const getTimeAgo = () => {\n    const date = new Date(createdAt);\n    const now = new Date();\n    const diff = Math.floor((now.getTime() - date.getTime()) / 1000);\n    \n    if (diff < 60) return language === 'fa' ? 'ŸáŸÖ€åŸÜ ÿßŸÑÿßŸÜ' : language === 'ps' ? 'ÿßŸàÿ≥' : 'just now';\n    if (diff < 3600) {\n      const mins = Math.floor(diff / 60);\n      return language === 'fa' ? `${mins} ÿØŸÇ€åŸÇŸá Ÿæ€åÿ¥` : language === 'ps' ? `${mins} ÿØŸÇ€åŸÇ€ê ŸÖÿÆ⁄©€ê` : `${mins}m ago`;\n    }\n    if (diff < 86400) {\n      const hours = Math.floor(diff / 3600);\n      return language === 'fa' ? `${hours} ÿ≥ÿßÿπÿ™ Ÿæ€åÿ¥` : language === 'ps' ? `${hours} ÿ≥ÿßÿπÿ™Ÿá ŸÖÿÆ⁄©€ê` : `${hours}h ago`;\n    }\n    const days = Math.floor(diff / 86400);\n    return language === 'fa' ? `${days} ÿ±Ÿàÿ≤ Ÿæ€åÿ¥` : language === 'ps' ? `${days} Ÿàÿ±⁄Å€ê ŸÖÿÆ⁄©€ê` : `${days}d ago`;\n  };\n\n  return (\n    <Card\n      className=\"overflow-hidden cursor-pointer transition-all duration-300 hover-elevate active-elevate-2 hover:shadow-lg hover:-translate-y-1\"\n      onClick={onClick}\n      data-testid={`card-listing-${id}`}\n    >\n      <div className=\"aspect-[4/3] bg-muted relative overflow-hidden\">\n        {imageUrl ? (\n          <img\n            src={imageUrl}\n            alt={title}\n            className=\"w-full h-full object-cover\"\n          />\n        ) : (\n          <div className=\"w-full h-full flex items-center justify-center text-6xl\">\n            {categories.find(c => c.id === category)?.icon || 'üì¶'}\n          </div>\n        )}\n        <div className=\"absolute top-2 ltr:left-2 rtl:right-2\">\n          <Badge variant=\"secondary\" className=\"bg-card/90 backdrop-blur-sm\">\n            {getCategoryName()}\n          </Badge>\n        </div>\n      </div>\n      <CardContent className=\"p-4\">\n        <h3 className=\"font-semibold text-base mb-2 line-clamp-2\" data-testid={`text-title-${id}`}>\n          {title}\n        </h3>\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"text-lg font-bold text-accent\" data-testid={`text-price-${id}`}>\n            {price.toLocaleString()} {t('afghani')}\n          </span>\n        </div>\n        <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n          <div className=\"flex items-center gap-1\">\n            <MapPin className=\"w-3 h-3\" />\n            <span>{getCityName()}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Clock className=\"w-3 h-3\" />\n            <span>{getTimeAgo()}</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3686},"client/src/components/SearchBar.tsx":{"content":"import { useState } from 'react';\nimport { Search } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { categories, cities } from '@shared/schema';\n\ninterface SearchBarProps {\n  onSearch?: (query: string, category: string, city: string) => void;\n}\n\nexport default function SearchBar({ onSearch }: SearchBarProps) {\n  const { t, language } = useLanguage();\n  const [query, setQuery] = useState('');\n  const [category, setCategory] = useState('');\n  const [city, setCity] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch?.(query, category, city);\n    console.log('Search:', { query, category, city });\n  };\n\n  const getCategoryName = (cat: typeof categories[number]) => {\n    if (language === 'fa') return cat.nameFA;\n    if (language === 'ps') return cat.namePS;\n    return cat.nameEN;\n  };\n\n  const getCityName = (cit: typeof cities[number]) => {\n    if (language === 'fa') return cit.nameFA;\n    if (language === 'ps') return cit.namePS;\n    return cit.nameEN;\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"w-full\">\n      <div className=\"flex flex-col md:flex-row gap-3\">\n        <Input\n          type=\"text\"\n          placeholder={t('searchPlaceholder')}\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          className=\"flex-1\"\n          data-testid=\"input-search-query\"\n        />\n        <Select value={category} onValueChange={setCategory}>\n          <SelectTrigger className=\"w-full md:w-[200px]\" data-testid=\"select-search-category\">\n            <SelectValue placeholder={t('selectCategory')} />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">{t('allCategories')}</SelectItem>\n            {categories.map(cat => (\n              <SelectItem key={cat.id} value={cat.id} data-testid={`option-category-${cat.id}`}>\n                {cat.icon} {getCategoryName(cat)}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <Select value={city} onValueChange={setCity}>\n          <SelectTrigger className=\"w-full md:w-[180px]\" data-testid=\"select-search-city\">\n            <SelectValue placeholder={t('selectCity')} />\n          </SelectTrigger>\n          <SelectContent>\n            {cities.map(cit => (\n              <SelectItem key={cit.id} value={cit.id} data-testid={`option-city-${cit.id}`}>\n                {cit.icon} {getCityName(cit)}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <Button type=\"submit\" className=\"w-full md:w-auto\" data-testid=\"button-search\">\n          <Search className=\"w-4 h-4 ltr:mr-2 rtl:ml-2\" />\n          {t('search')}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":2987},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  user: { id: string; name: string; phone: string } | null;\n  login: (user: { id: string; name: string; phone: string }) => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<{ id: string; name: string; phone: string } | null>(() => {\n    const saved = localStorage.getItem('user');\n    return saved ? JSON.parse(saved) : null;\n  });\n\n  const login = (userData: { id: string; name: string; phone: string }) => {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  const isAuthenticated = user !== null;\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n}\n","size_bytes":1249},"client/src/contexts/LanguageContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ntype Language = 'fa' | 'ps' | 'en';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n  dir: 'rtl' | 'ltr';\n}\n\nconst translations = {\n  fa: {\n    appName: 'ŸáŸÖÿ±ÿßŸá ÿ®ÿßÿ≤ÿßÿ±',\n    home: 'ÿÆÿßŸÜŸá',\n    login: 'Ÿàÿ±ŸàÿØ',\n    register: 'ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ',\n    logout: 'ÿÆÿ±Ÿàÿ¨',\n    search: 'ÿ¨ÿ≥ÿ™ÿ¨Ÿà',\n    searchPlaceholder: '⁄Ü€å ŸÖ€å‚Äå⁄Øÿ±ÿØ€åÿü',\n    allCategories: 'ŸáŸÖŸá ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å‚ÄåŸáÿß',\n    afghanCities: 'ÿ¥Ÿáÿ±Ÿáÿß€å ÿßŸÅÿ∫ÿßŸÜÿ≥ÿ™ÿßŸÜ',\n    recentListings: 'ÿ¢ÿÆÿ±€åŸÜ ÿ¢⁄ØŸá€å‚ÄåŸáÿß€å ŸÖŸÜÿ™ÿ¥ÿ± ÿ¥ÿØŸá',\n    selectCategory: 'ÿßŸÜÿ™ÿÆÿßÿ® ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å',\n    selectCity: 'ÿßŸÜÿ™ÿÆÿßÿ® ÿ¥Ÿáÿ±',\n    postAd: 'ÿ´ÿ®ÿ™ ÿ¢⁄ØŸá€å',\n    myDashboard: 'ÿØÿßÿ¥ÿ®Ÿàÿ±ÿØ ŸÖŸÜ',\n    contactSeller: 'ÿ™ŸÖÿßÿ≥ ÿ®ÿß ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá',\n    price: 'ŸÇ€åŸÖÿ™',\n    description: 'ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™',\n    details: 'ÿ¨ÿ≤ÿ¶€åÿßÿ™',\n    back: 'ÿ®ÿßÿ≤⁄Øÿ¥ÿ™',\n    phoneNumber: 'ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥',\n    password: 'ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ±',\n    name: 'ŸÜÿßŸÖ',\n    title: 'ÿπŸÜŸàÿßŸÜ',\n    category: 'ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å',\n    city: 'ÿ¥Ÿáÿ±',\n    submit: 'ÿ´ÿ®ÿ™',\n    cancel: 'ŸÑÿ∫Ÿà',\n    loading: 'ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å...',\n    noResults: 'ŸÜÿ™€åÿ¨Ÿá‚Äåÿß€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ',\n    afghani: 'ÿßŸÅÿ∫ÿßŸÜ€å',\n    aboutUs: 'ÿØÿ±ÿ®ÿßÿ±Ÿá ŸÖÿß',\n    contactUs: 'ÿ™ŸÖÿßÿ≥ ÿ®ÿß ŸÖÿß',\n    termsOfService: 'ÿ¥ÿ±ÿß€åÿ∑ ÿßÿ≥ÿ™ŸÅÿßÿØŸá',\n    privacyPolicy: 'ÿ≠ÿ±€åŸÖ ÿÆÿµŸàÿµ€å',\n    allRightsReserved: '⁄©ŸÑ€åŸá ÿ≠ŸÇŸàŸÇ ŸÖÿ≠ŸÅŸàÿ∏ ÿßÿ≥ÿ™',\n  },\n  ps: {\n    appName: 'ŸáŸÖÿ±ÿßŸá ÿ®ÿßÿ≤ÿßÿ±',\n    home: '⁄©Ÿàÿ±',\n    login: 'ŸÜŸÜŸàÿ™ŸÑ',\n    register: 'ŸÜŸàŸÖ ŸÑ€å⁄©ŸÜŸá',\n    logout: 'Ÿàÿ™ŸÑ',\n    search: 'ŸÑŸºŸàŸÜ',\n    searchPlaceholder: '⁄ÖŸá ŸÑŸºŸà€åÿü',\n    allCategories: 'ŸºŸàŸÑ€ê ⁄©Ÿº⁄´Ÿàÿ±€ç',\n    afghanCities: 'ÿØ ÿßŸÅÿ∫ÿßŸÜÿ≥ÿ™ÿßŸÜ ⁄öÿßÿ±ŸàŸÜŸá',\n    recentListings: 'Ÿàÿ±Ÿàÿ≥ÿ™Ÿä ÿßÿπŸÑÿßŸÜŸàŸÜŸá',\n    selectCategory: '⁄©Ÿº⁄´Ÿàÿ±Ÿä ÿ∫Ÿàÿ±Ÿá ⁄©⁄ìÿ¶',\n    selectCity: '⁄öÿßÿ± ÿ∫Ÿàÿ±Ÿá ⁄©⁄ìÿ¶',\n    postAd: 'ÿßÿπŸÑÿßŸÜ ÿÆŸæŸàÿ± ⁄©⁄ìÿ¶',\n    myDashboard: 'ÿ≤ŸÖÿß ⁄âÿ¥ÿ®Ÿàÿ±⁄â',\n    contactSeller: 'ŸæŸÑŸàÿ±ŸàŸÜ⁄©€å ÿ≥ÿ±Ÿá ÿß⁄ì€å⁄©Ÿá',\n    price: 'ÿ®€åŸá',\n    description: 'ÿ™ŸÅÿµ€åŸÑ',\n    details: 'ÿ¨ÿ≤ÿ¶€åÿßÿ™',\n    back: 'ÿ¥ÿßÿ™Ÿá',\n    phoneNumber: 'ÿØ ÿ™ŸÑ€åŸÅŸàŸÜ ÿ¥ŸÖ€åÿ±Ÿá',\n    password: 'ŸæŸº ŸÜŸàŸÖ',\n    name: 'ŸÜŸàŸÖ',\n    title: 'ÿ≥ÿ±ŸÑ€å⁄©',\n    category: '⁄©Ÿº⁄´Ÿàÿ±Ÿä',\n    city: '⁄öÿßÿ±',\n    submit: 'ÿ´ÿ®ÿ™',\n    cancel: 'ŸÑÿ∫ŸàŸá',\n    loading: 'ÿ®ÿßÿ±€êÿØŸÑ...',\n    noResults: 'Ÿæÿß€åŸÑŸá ŸàŸÜŸá ŸÖŸàŸÜÿØŸÑ ÿ¥ŸàŸá',\n    afghani: 'ÿßŸÅÿ∫ÿßŸÜ€ç',\n    aboutUs: 'ÿ≤ŸÖŸà⁄ñ ŸæŸá ÿß⁄ìŸá',\n    contactUs: 'ŸÖŸà⁄ñ ÿ≥ÿ±Ÿá ÿß⁄ì€å⁄©Ÿá',\n    termsOfService: 'ÿØ ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ ÿ¥ÿ±ÿ∑ŸàŸÜŸá',\n    privacyPolicy: 'ÿØ ŸÖÿ≠ÿ±ŸÖ€åÿ™ ŸæÿßŸÑ€åÿ≥Ÿä',\n    allRightsReserved: 'ŸºŸàŸÑ ÿ≠ŸÇŸàŸÜŸá ÿÆŸàŸÜÿØŸä ÿØŸä',\n  },\n  en: {\n    appName: 'Hamrah Bazar',\n    home: 'Home',\n    login: 'Login',\n    register: 'Register',\n    logout: 'Logout',\n    search: 'Search',\n    searchPlaceholder: 'What are you looking for?',\n    allCategories: 'All Categories',\n    afghanCities: 'Afghan Cities',\n    recentListings: 'Recent Listings',\n    selectCategory: 'Select Category',\n    selectCity: 'Select City',\n    postAd: 'Post Ad',\n    myDashboard: 'My Dashboard',\n    contactSeller: 'Contact Seller',\n    price: 'Price',\n    description: 'Description',\n    details: 'Details',\n    back: 'Back',\n    phoneNumber: 'Phone Number',\n    password: 'Password',\n    name: 'Name',\n    title: 'Title',\n    category: 'Category',\n    city: 'City',\n    submit: 'Submit',\n    cancel: 'Cancel',\n    loading: 'Loading...',\n    noResults: 'No results found',\n    afghani: 'AFN',\n    aboutUs: 'About Us',\n    contactUs: 'Contact Us',\n    termsOfService: 'Terms of Service',\n    privacyPolicy: 'Privacy Policy',\n    allRightsReserved: 'All rights reserved',\n  },\n};\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguageState] = useState<Language>(() => {\n    const saved = localStorage.getItem('language');\n    return (saved as Language) || 'fa';\n  });\n\n  const setLanguage = (lang: Language) => {\n    setLanguageState(lang);\n    localStorage.setItem('language', lang);\n    \n    const html = document.documentElement;\n    html.lang = lang;\n    html.dir = lang === 'en' ? 'ltr' : 'rtl';\n  };\n\n  useEffect(() => {\n    const html = document.documentElement;\n    html.lang = language;\n    html.dir = language === 'en' ? 'ltr' : 'rtl';\n  }, [language]);\n\n  const t = (key: string) => {\n    return translations[language][key as keyof typeof translations['fa']] || key;\n  };\n\n  const dir = language === 'en' ? 'ltr' : 'rtl';\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, t, dir }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within LanguageProvider');\n  }\n  return context;\n}\n","size_bytes":5129},"client/src/contexts/ThemeContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const saved = localStorage.getItem('theme');\n    return (saved as Theme) || 'light';\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === 'dark') {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1128},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AuthPage.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport FixedHeader from '@/components/FixedHeader';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AuthPage() {\n  const [, navigate] = useLocation();\n  const { t } = useLanguage();\n  const { login } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [loginData, setLoginData] = useState({\n    phone: '',\n    password: '',\n  });\n\n  const [registerData, setRegisterData] = useState({\n    name: '',\n    phone: '',\n    password: '',\n    confirmPassword: '',\n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(loginData),\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        toast({\n          title: 'ÿÆÿ∑ÿß',\n          description: data.message || 'Ÿàÿ±ŸàÿØ ŸÜÿßŸÖŸàŸÅŸÇ ÿ®ŸàÿØ',\n          variant: 'destructive',\n        });\n        setIsLoading(false);\n        return;\n      }\n      \n      login(data.user);\n      toast({\n        title: t('login'),\n        description: 'Ÿàÿ±ŸàÿØ ŸÖŸàŸÅŸÇ€åÿ™‚Äåÿ¢ŸÖ€åÿ≤ ÿ®ŸàÿØ',\n      });\n      navigate('/');\n    } catch (error) {\n      toast({\n        title: 'ÿÆÿ∑ÿß',\n        description: 'ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿ±ŸÇÿ±ÿßÿ±€å ÿßÿ±ÿ™ÿ®ÿßÿ∑',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (registerData.password !== registerData.confirmPassword) {\n      toast({\n        title: 'ÿÆÿ∑ÿß',\n        description: 'ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± Ÿà ÿ™ÿß€å€åÿØ ÿ¢ŸÜ €å⁄©ÿ≥ÿßŸÜ ŸÜ€åÿ≥ÿ™',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          name: registerData.name,\n          phone: registerData.phone,\n          password: registerData.password,\n        }),\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        toast({\n          title: 'ÿÆÿ∑ÿß',\n          description: data.message || 'ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ŸÜÿßŸÖŸàŸÅŸÇ ÿ®ŸàÿØ',\n          variant: 'destructive',\n        });\n        setIsLoading(false);\n        return;\n      }\n      \n      login(data.user);\n      toast({\n        title: t('register'),\n        description: 'ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ŸÖŸàŸÅŸÇ€åÿ™‚Äåÿ¢ŸÖ€åÿ≤ ÿ®ŸàÿØ',\n      });\n      navigate('/');\n    } catch (error) {\n      toast({\n        title: 'ÿÆÿ∑ÿß',\n        description: 'ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿ±ŸÇÿ±ÿßÿ±€å ÿßÿ±ÿ™ÿ®ÿßÿ∑',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <FixedHeader showBackButton />\n      \n      <main className=\"pt-24 pb-12\">\n        <div className=\"container mx-auto px-4 max-w-md\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-2xl text-center\">{t('appName')}</CardTitle>\n              <CardDescription className=\"text-center\">\n                {t('language') === 'fa' && 'ÿ®Ÿá ŸáŸÖÿ±ÿßŸá ÿ®ÿßÿ≤ÿßÿ± ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ'}\n                {t('language') === 'ps' && 'ÿØ ŸáŸÖÿ±ÿßŸá ÿ®ÿßÿ≤ÿßÿ± ÿ™Ÿá ⁄öŸá ÿ±ÿßÿ∫ŸÑÿßÿ≥ÿ™'}\n                {t('language') === 'en' && 'Welcome to Hamrah Bazar'}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"login\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"login\" data-testid=\"tab-login\">{t('login')}</TabsTrigger>\n                  <TabsTrigger value=\"register\" data-testid=\"tab-register\">{t('register')}</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"login\">\n                  <form onSubmit={handleLogin} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-phone\">{t('phoneNumber')}</Label>\n                      <Input\n                        id=\"login-phone\"\n                        type=\"tel\"\n                        placeholder=\"+93 700 123 456\"\n                        value={loginData.phone}\n                        onChange={(e) => setLoginData({ ...loginData, phone: e.target.value })}\n                        required\n                        data-testid=\"input-login-phone\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-password\">{t('password')}</Label>\n                      <Input\n                        id=\"login-password\"\n                        type=\"password\"\n                        value={loginData.password}\n                        onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                        required\n                        data-testid=\"input-login-password\"\n                      />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={isLoading}\n                      data-testid=\"button-login-submit\"\n                    >\n                      {isLoading ? t('loading') : t('login')}\n                    </Button>\n                  </form>\n                </TabsContent>\n                \n                <TabsContent value=\"register\">\n                  <form onSubmit={handleRegister} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-name\">{t('name')}</Label>\n                      <Input\n                        id=\"register-name\"\n                        type=\"text\"\n                        value={registerData.name}\n                        onChange={(e) => setRegisterData({ ...registerData, name: e.target.value })}\n                        required\n                        data-testid=\"input-register-name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-phone\">{t('phoneNumber')}</Label>\n                      <Input\n                        id=\"register-phone\"\n                        type=\"tel\"\n                        placeholder=\"+93 700 123 456\"\n                        value={registerData.phone}\n                        onChange={(e) => setRegisterData({ ...registerData, phone: e.target.value })}\n                        required\n                        data-testid=\"input-register-phone\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-password\">{t('password')}</Label>\n                      <Input\n                        id=\"register-password\"\n                        type=\"password\"\n                        value={registerData.password}\n                        onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}\n                        required\n                        data-testid=\"input-register-password\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-confirm-password\">\n                        {t('language') === 'fa' ? 'ÿ™ÿß€å€åÿØ ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ±' : t('language') === 'ps' ? 'ÿØ ŸæŸº ŸÜŸàŸÖ ÿ™ÿß€å€åÿØ' : 'Confirm Password'}\n                      </Label>\n                      <Input\n                        id=\"register-confirm-password\"\n                        type=\"password\"\n                        value={registerData.confirmPassword}\n                        onChange={(e) => setRegisterData({ ...registerData, confirmPassword: e.target.value })}\n                        required\n                        data-testid=\"input-register-confirm-password\"\n                      />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={isLoading}\n                      data-testid=\"button-register-submit\"\n                    >\n                      {isLoading ? t('loading') : t('register')}\n                    </Button>\n                  </form>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n\n          <p className=\"text-center text-sm text-muted-foreground mt-6\">\n            {t('language') === 'fa' && 'ÿ®ÿß ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖÿå ÿ¥ŸÖÿß ŸÇŸàÿßŸÜ€åŸÜ Ÿà ŸÖŸÇÿ±ÿ±ÿßÿ™ ŸáŸÖÿ±ÿßŸá ÿ®ÿßÿ≤ÿßÿ± ÿ±ÿß ŸÖ€å‚ÄåŸæÿ∞€åÿ±€åÿØ'}\n            {t('language') === 'ps' && 'ÿØ ŸÜŸàŸÖ ŸÑ€å⁄©ŸÜ€ê ÿ≥ÿ±Ÿáÿå ÿ™ÿßÿ≥Ÿà ÿØ ŸáŸÖÿ±ÿßŸá ÿ®ÿßÿ≤ÿßÿ± ŸÇŸàÿßŸÜ€åŸÜ ŸÖŸÜÿ¶'}\n            {t('language') === 'en' && 'By registering, you agree to Hamrah Bazar terms'}\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9599},"client/src/pages/HomePage.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport FixedHeader from '@/components/FixedHeader';\nimport Footer from '@/components/Footer';\nimport SearchBar from '@/components/SearchBar';\nimport CategoryCircle from '@/components/CategoryCircle';\nimport CityCircle from '@/components/CityCircle';\nimport ListingCard from '@/components/ListingCard';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { categories, cities, type Listing } from '@shared/schema';\nimport { Plus } from 'lucide-react';\n\nexport default function HomePage() {\n  const [, navigate] = useLocation();\n  const { t } = useLanguage();\n  const [selectedCategory, setSelectedCategory] = useState<string>('');\n  const [selectedCity, setSelectedCity] = useState<string>('');\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const queryParams = new URLSearchParams();\n  if (searchQuery) queryParams.append('query', searchQuery);\n  if (selectedCategory) queryParams.append('category', selectedCategory);\n  if (selectedCity) queryParams.append('city', selectedCity);\n  \n  const queryString = queryParams.toString();\n  const queryKey = queryString ? `/api/listings?${queryString}` : '/api/listings';\n\n  const { data: listings, isLoading } = useQuery<Listing[]>({\n    queryKey: [queryKey],\n  });\n\n  const handleSearch = (query: string, category: string, city: string) => {\n    setSearchQuery(query);\n    setSelectedCategory(category === 'all' ? '' : category);\n    setSelectedCity(city);\n  };\n\n  const clearFilters = () => {\n    setSearchQuery('');\n    setSelectedCategory('');\n    setSelectedCity('');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <FixedHeader />\n      \n      <main className=\"pt-20 pb-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"bg-card rounded-lg border border-border shadow-sm p-6 mb-8\">\n            <h2 className=\"text-xl md:text-2xl font-bold mb-4 text-foreground\">{t('search')}</h2>\n            <SearchBar onSearch={handleSearch} />\n          </div>\n\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-xl md:text-2xl font-bold text-foreground\">{t('allCategories')}</h2>\n            </div>\n            <div className=\"relative\">\n              <div className=\"flex gap-4 overflow-x-auto pb-4 scrollbar-hide\">\n                {categories.map(cat => (\n                  <CategoryCircle\n                    key={cat.id}\n                    category={cat}\n                    onClick={() => {\n                      setSelectedCategory(cat.id);\n                      setSelectedCity('');\n                      setSearchQuery('');\n                    }}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-xl md:text-2xl font-bold text-foreground\">{t('afghanCities')}</h2>\n            </div>\n            <div className=\"relative\">\n              <div className=\"flex gap-4 overflow-x-auto pb-4 scrollbar-hide\">\n                {cities.map(city => (\n                  <CityCircle\n                    key={city.id}\n                    city={city}\n                    onClick={() => {\n                      setSelectedCity(city.id);\n                      setSelectedCategory('');\n                      setSearchQuery('');\n                    }}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {(selectedCategory || selectedCity || searchQuery) && (\n            <div className=\"mb-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={clearFilters}\n                data-testid=\"button-clear-filters\"\n              >\n                {t('cancel')}\n              </Button>\n            </div>\n          )}\n\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl md:text-2xl font-bold text-foreground\">{t('recentListings')}</h2>\n            </div>\n            \n            {isLoading ? (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {[1, 2, 3, 4, 5, 6, 7, 8].map(i => (\n                  <Card key={i} className=\"overflow-hidden animate-pulse\">\n                    <div className=\"aspect-[4/3] bg-muted\" />\n                    <div className=\"p-4 space-y-2\">\n                      <div className=\"h-4 bg-muted rounded w-3/4\" />\n                      <div className=\"h-4 bg-muted rounded w-1/2\" />\n                      <div className=\"h-6 bg-muted rounded w-1/3 mt-2\" />\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            ) : listings && listings.length > 0 ? (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {listings.map(listing => (\n                  <ListingCard\n                    key={listing.id}\n                    id={listing.id}\n                    title={listing.title}\n                    price={listing.price}\n                    category={listing.category}\n                    city={listing.city}\n                    imageUrl={listing.imageUrl || undefined}\n                    createdAt={typeof listing.createdAt === 'string' ? listing.createdAt : (listing.createdAt ? new Date(listing.createdAt).toISOString() : new Date().toISOString())}\n                    onClick={() => navigate(`/listing/${listing.id}`)}\n                  />\n                ))}\n              </div>\n            ) : (\n              <Card className=\"p-12 text-center\">\n                <p className=\"text-xl text-muted-foreground\">\n                  {t('noResults')}\n                </p>\n              </Card>\n            )}\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6186},"client/src/pages/ListingDetailPage.tsx":{"content":"import { useRoute, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport FixedHeader from '@/components/FixedHeader';\nimport Footer from '@/components/Footer';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { categories, cities, type Listing, type User } from '@shared/schema';\nimport { Phone, MapPin, Clock, User as UserIcon, LogIn } from 'lucide-react';\n\nexport default function ListingDetailPage() {\n  const [, params] = useRoute('/listing/:id');\n  const [, navigate] = useLocation();\n  const { t, language } = useLanguage();\n  const { user: currentUser } = useAuth();\n  const listingId = params?.id;\n\n  const { data: listing, isLoading } = useQuery<Listing>({\n    queryKey: ['/api/listings', listingId],\n    enabled: !!listingId,\n  });\n\n  const { data: seller } = useQuery<User>({\n    queryKey: ['/api/user', listing?.userId],\n    enabled: !!listing?.userId,\n  });\n\n  const getCategoryName = () => {\n    if (!listing) return '';\n    const cat = categories.find(c => c.id === listing.category);\n    if (!cat) return listing.category;\n    if (language === 'fa') return cat.nameFA;\n    if (language === 'ps') return cat.namePS;\n    return cat.nameEN;\n  };\n\n  const getCityName = () => {\n    if (!listing) return '';\n    const city = cities.find(c => c.id === listing.city);\n    if (!city) return listing.city;\n    if (language === 'fa') return city.nameFA;\n    if (language === 'ps') return city.namePS;\n    return city.nameEN;\n  };\n\n  const getTimeAgo = () => {\n    if (!listing?.createdAt) return '';\n    const date = new Date(listing.createdAt);\n    const now = new Date();\n    const diff = Math.floor((now.getTime() - date.getTime()) / 1000);\n    \n    if (diff < 60) return language === 'fa' ? 'ŸáŸÖ€åŸÜ ÿßŸÑÿßŸÜ' : language === 'ps' ? 'ÿßŸàÿ≥' : 'just now';\n    if (diff < 3600) {\n      const mins = Math.floor(diff / 60);\n      return language === 'fa' ? `${mins} ÿØŸÇ€åŸÇŸá Ÿæ€åÿ¥` : language === 'ps' ? `${mins} ÿØŸÇ€åŸÇ€ê ŸÖÿÆ⁄©€ê` : `${mins}m ago`;\n    }\n    if (diff < 86400) {\n      const hours = Math.floor(diff / 3600);\n      return language === 'fa' ? `${hours} ÿ≥ÿßÿπÿ™ Ÿæ€åÿ¥` : language === 'ps' ? `${hours} ÿ≥ÿßÿπÿ™Ÿá ŸÖÿÆ⁄©€ê` : `${hours}h ago`;\n    }\n    const days = Math.floor(diff / 86400);\n    return language === 'fa' ? `${days} ÿ±Ÿàÿ≤ Ÿæ€åÿ¥` : language === 'ps' ? `${days} Ÿàÿ±⁄Å€ê ŸÖÿÆ⁄©€ê` : `${days}d ago`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <FixedHeader showBackButton />\n        <main className=\"pt-20 pb-12\">\n          <div className=\"container mx-auto px-4 max-w-5xl\">\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"md:col-span-2 space-y-6\">\n                <Card className=\"animate-pulse\">\n                  <div className=\"aspect-video bg-muted\" />\n                </Card>\n                <Card className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-8 bg-muted rounded w-3/4\" />\n                    <div className=\"h-4 bg-muted rounded w-1/2 mt-2\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-6 bg-muted rounded w-1/3 mb-4\" />\n                    <div className=\"space-y-2\">\n                      <div className=\"h-4 bg-muted rounded\" />\n                      <div className=\"h-4 bg-muted rounded\" />\n                      <div className=\"h-4 bg-muted rounded w-5/6\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n              <div className=\"space-y-6\">\n                <Card className=\"animate-pulse\">\n                  <CardContent className=\"p-6 space-y-4\">\n                    <div className=\"h-10 bg-muted rounded\" />\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!listing) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <FixedHeader showBackButton />\n        <main className=\"pt-20 pb-12\">\n          <div className=\"container mx-auto px-4 max-w-5xl\">\n            <Card className=\"p-12 text-center\">\n              <p className=\"text-xl text-muted-foreground\">\n                {language === 'fa' ? 'ÿ¢⁄ØŸá€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ' :\n                 language === 'ps' ? 'ÿßÿπŸÑÿßŸÜ ŸàŸÜŸá ŸÖŸàŸÜÿØŸÑ ÿ¥Ÿà' :\n                 'Listing not found'}\n              </p>\n              <Button onClick={() => navigate('/')} className=\"mt-4\">\n                {language === 'fa' ? 'ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ÿµŸÅÿ≠Ÿá ÿßÿµŸÑ€å' :\n                 language === 'ps' ? 'ÿßÿµŸÑŸä Ÿæÿß⁄º€ê ÿ™Ÿá ÿ±ÿßÿ≥ÿ™ŸÜ€åÿØŸÑ' :\n                 'Go to Home'}\n              </Button>\n            </Card>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <FixedHeader showBackButton />\n      \n      <main className=\"pt-20 pb-12\">\n        <div className=\"container mx-auto px-4 max-w-5xl\">\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <div className=\"md:col-span-2 space-y-6\">\n              <Card>\n                {listing.imageUrl ? (\n                  <img\n                    src={listing.imageUrl}\n                    alt={listing.title}\n                    className=\"w-full aspect-video object-cover rounded-t-lg\"\n                  />\n                ) : (\n                  <div className=\"aspect-video bg-muted flex items-center justify-center text-8xl\">\n                    {categories.find(c => c.id === listing.category)?.icon || 'üì¶'}\n                  </div>\n                )}\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-2xl mb-2\" data-testid=\"text-listing-title\">\n                        {listing.title}\n                      </CardTitle>\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center gap-1\">\n                          <MapPin className=\"w-4 h-4\" />\n                          <span>{getCityName()}</span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"w-4 h-4\" />\n                          <span>{getTimeAgo()}</span>\n                        </div>\n                      </div>\n                    </div>\n                    <Badge variant=\"secondary\">{getCategoryName()}</Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"mb-6\">\n                    <p className=\"text-3xl font-bold text-accent\" data-testid=\"text-listing-price\">\n                      ${listing.price.toLocaleString()}\n                    </p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-2 text-foreground\">\n                      {language === 'fa' ? 'ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™' : language === 'ps' ? 'ÿ™ŸÅÿµ€åŸÑ' : 'Description'}\n                    </h3>\n                    <p className=\"text-muted-foreground whitespace-pre-wrap\" data-testid=\"text-listing-description\">\n                      {listing.description}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">\n                    {language === 'fa' ? 'ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá' :\n                     language === 'ps' ? 'ÿØ ŸæŸÑŸàÿ±ŸàŸÜ⁄©Ÿä ŸÖÿπŸÑŸàŸÖÿßÿ™' :\n                     'Seller Information'}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <UserIcon className=\"w-5 h-5 text-muted-foreground\" />\n                    <span className=\"text-foreground\" data-testid=\"text-seller-name\">\n                      {seller?.name || language === 'fa' ? '⁄©ÿßÿ±ÿ®ÿ±' : language === 'ps' ? '⁄©ÿßÿ±ŸÜ' : 'User'}\n                    </span>\n                  </div>\n                  {currentUser ? (\n                    <Button className=\"w-full\" data-testid=\"button-contact-seller\">\n                      <Phone className=\"w-4 h-4 ltr:mr-2 rtl:ml-2\" />\n                      {language === 'fa' ? 'ŸÜŸÖÿß€åÿ¥ ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥' :\n                       language === 'ps' ? 'ÿØ ÿ™ŸÑ€åŸÅŸàŸÜ ÿ¥ŸÖ€åÿ±Ÿá Ÿà⁄´Ÿàÿ±ÿ¶' :\n                       'Show Phone Number'}\n                    </Button>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      <p className=\"text-sm text-muted-foreground text-center\">\n                        {language === 'fa' ? 'ÿ®ÿ±ÿß€å ŸÖÿ¥ÿßŸáÿØŸá ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥ÿå Ÿàÿßÿ±ÿØ ÿ¥Ÿà€åÿØ' :\n                         language === 'ps' ? 'ÿØ ÿ™ŸÑ€åŸÅŸàŸÜ ÿ¥ŸÖ€åÿ±Ÿá ŸÑ€åÿØŸÑŸà ŸÑŸæÿßÿ±Ÿáÿå ŸÜŸÜŸà⁄Åÿ¶' :\n                         'Login to see phone number'}\n                      </p>\n                      <Button\n                        className=\"w-full\"\n                        onClick={() => navigate('/auth')}\n                        data-testid=\"button-login-to-contact\"\n                      >\n                        <LogIn className=\"w-4 h-4 ltr:mr-2 rtl:ml-2\" />\n                        {t('login')}\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-muted/50\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold mb-3 text-foreground\">\n                    {language === 'fa' ? 'ŸÜ⁄©ÿßÿ™ ÿß€åŸÖŸÜ€å' :\n                     language === 'ps' ? 'ÿØ ÿÆŸàŸÜÿØ€åÿ™Ÿàÿ® ŸÜ⁄©ÿ™€ê' :\n                     'Safety Tips'}\n                  </h3>\n                  <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                    <li>‚Ä¢ {language === 'fa' ? 'ŸÇÿ®ŸÑ ÿßÿ≤ Ÿæÿ±ÿØÿßÿÆÿ™ÿå ŸÖÿ≠ÿµŸàŸÑ ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ' :\n                              language === 'ps' ? 'ÿØ ÿ™ÿßÿØ€å€ê ÿØŸÖÿÆŸáÿå ŸÖÿ≠ÿµŸàŸÑ Ÿà⁄´Ÿàÿ±ÿ¶' :\n                              'Inspect the item before payment'}</li>\n                    <li>‚Ä¢ {language === 'fa' ? 'ÿØÿ± ŸÖ⁄©ÿßŸÜ ÿπŸÖŸàŸÖ€å ŸÖŸÑÿßŸÇÿßÿ™ ⁄©ŸÜ€åÿØ' :\n                              language === 'ps' ? 'ŸæŸá ÿπÿßŸÖŸá ⁄Åÿß€å ⁄©€ê ŸàŸÑ€åÿØŸÑ ÿ¥ÿ¶' :\n                              'Meet in a public place'}</li>\n                    <li>‚Ä¢ {language === 'fa' ? 'ÿßÿ≤ Ÿæ€åÿ¥‚ÄåŸæÿ±ÿØÿßÿÆÿ™ ÿßÿ≠ÿ™ÿ±ÿßÿ≤ ⁄©ŸÜ€åÿØ' :\n                              language === 'ps' ? 'ŸÑŸá ŸÖÿÆ⁄©€åŸÜ€ç ÿ™ÿßÿØ€å€ê ⁄â⁄âŸá Ÿà⁄©⁄ìÿ¶' :\n                              'Avoid advance payments'}</li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11322},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/CategoryCircle.tsx":{"content":"import CategoryCircle from '../CategoryCircle';\nimport { LanguageProvider } from '@/contexts/LanguageContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\nimport { categories } from '@shared/schema';\n\nexport default function CategoryCircleExample() {\n  return (\n    <ThemeProvider>\n      <LanguageProvider>\n        <div className=\"p-8 flex gap-4\">\n          <CategoryCircle \n            category={categories[0]} \n            onClick={() => console.log('Clicked:', categories[0].id)} \n          />\n          <CategoryCircle \n            category={categories[1]} \n            onClick={() => console.log('Clicked:', categories[1].id)} \n          />\n        </div>\n      </LanguageProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":728},"client/src/components/examples/CityCircle.tsx":{"content":"import CityCircle from '../CityCircle';\nimport { LanguageProvider } from '@/contexts/LanguageContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\nimport { cities } from '@shared/schema';\n\nexport default function CityCircleExample() {\n  return (\n    <ThemeProvider>\n      <LanguageProvider>\n        <div className=\"p-8 flex gap-4\">\n          <CityCircle \n            city={cities[0]} \n            onClick={() => console.log('Clicked:', cities[0].id)} \n          />\n          <CityCircle \n            city={cities[1]} \n            onClick={() => console.log('Clicked:', cities[1].id)} \n          />\n        </div>\n      </LanguageProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":680},"client/src/components/examples/FixedHeader.tsx":{"content":"import FixedHeader from '../FixedHeader';\nimport { LanguageProvider } from '@/contexts/LanguageContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\n\nexport default function FixedHeaderExample() {\n  return (\n    <ThemeProvider>\n      <LanguageProvider>\n        <div className=\"min-h-screen\">\n          <FixedHeader />\n          <div className=\"pt-20 p-4\">\n            <p>Header Example - Scroll to see sticky behavior</p>\n          </div>\n        </div>\n      </LanguageProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":521},"client/src/components/examples/ListingCard.tsx":{"content":"import ListingCard from '../ListingCard';\nimport { LanguageProvider } from '@/contexts/LanguageContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\n\nexport default function ListingCardExample() {\n  return (\n    <ThemeProvider>\n      <LanguageProvider>\n        <div className=\"p-8 max-w-sm\">\n          <ListingCard\n            id=\"1\"\n            title=\"ÿ™Ÿà€åŸàÿ™ÿß ⁄©ÿ±ŸàŸÑÿß ŸÖÿØŸÑ €≤€∞€≤€∞\"\n            price={25000}\n            category=\"vehicles\"\n            city=\"kabul\"\n            createdAt={new Date(Date.now() - 3600000).toISOString()}\n            onClick={() => console.log('Card clicked')}\n          />\n        </div>\n      </LanguageProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":697},"client/src/components/examples/SearchBar.tsx":{"content":"import SearchBar from '../SearchBar';\nimport { LanguageProvider } from '@/contexts/LanguageContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\n\nexport default function SearchBarExample() {\n  return (\n    <ThemeProvider>\n      <LanguageProvider>\n        <div className=\"p-8\">\n          <SearchBar onSearch={(q, cat, city) => console.log({ q, cat, city })} />\n        </div>\n      </LanguageProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":442},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/examples/AuthPage.tsx":{"content":"import AuthPage from '../AuthPage';\nimport { LanguageProvider } from '@/contexts/LanguageContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\n\nexport default function AuthPageExample() {\n  return (\n    <ThemeProvider>\n      <LanguageProvider>\n        <AuthPage />\n      </LanguageProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":332},"client/src/pages/examples/HomePage.tsx":{"content":"import HomePage from '../HomePage';\nimport { LanguageProvider } from '@/contexts/LanguageContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\n\nexport default function HomePageExample() {\n  return (\n    <ThemeProvider>\n      <LanguageProvider>\n        <HomePage />\n      </LanguageProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":332},"client/src/pages/examples/ListingDetailPage.tsx":{"content":"import ListingDetailPage from '../ListingDetailPage';\nimport { LanguageProvider } from '@/contexts/LanguageContext';\nimport { ThemeProvider } from '@/contexts/ThemeContext';\n\nexport default function ListingDetailPageExample() {\n  return (\n    <ThemeProvider>\n      <LanguageProvider>\n        <ListingDetailPage />\n      </LanguageProvider>\n    </ThemeProvider>\n  );\n}\n","size_bytes":368},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { neonConfig, Pool } from \"@neondatabase/serverless\";\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL must be set\");\n}\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle(pool, { schema });\n","size_bytes":418},"client/src/pages/CreateListingPage.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { categories, cities } from '@shared/schema';\nimport FixedHeader from '@/components/FixedHeader';\nimport { useMutation } from '@tanstack/react-query';\nimport { queryClient } from '@/lib/queryClient';\nimport { ArrowRight } from 'lucide-react';\n\nexport default function CreateListingPage() {\n  const { t, language, dir } = useLanguage();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  \n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    price: '',\n    category: '',\n    city: '',\n    imageUrl: '',\n  });\n\n  const createListingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/listings', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...data,\n          userId: user?.id || 'guest',\n          price: parseInt(data.price),\n        }),\n      });\n      if (!response.ok) throw new Error('Failed to create listing');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });\n      toast({\n        title: t('success') || 'ŸÖŸàŸÅŸÇ€åÿ™',\n        description: language === 'fa' ? 'ÿ¢⁄ØŸá€å ÿ¥ŸÖÿß ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ´ÿ®ÿ™ ÿ¥ÿØ' : \n                     language === 'ps' ? 'ÿ≥ÿ™ÿßÿ≥Ÿà ÿßÿπŸÑÿßŸÜ ŸæŸá ÿ®ÿ±€åÿßŸÑ€åÿ™Ÿàÿ® ÿ≥ÿ±Ÿá ÿ´ÿ®ÿ™ ÿ¥Ÿà' :\n                     'Your listing has been created successfully',\n      });\n      navigate('/');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: language === 'fa' ? 'ÿÆÿ∑ÿß' : language === 'ps' ? 'ÿ™€åÿ±Ÿàÿ™ŸÜŸá' : 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!user) {\n      toast({\n        title: language === 'fa' ? 'ÿÆÿ∑ÿß' : language === 'ps' ? 'ÿ™€åÿ±Ÿàÿ™ŸÜŸá' : 'Error',\n        description: language === 'fa' ? 'ŸÑÿ∑ŸÅÿß ÿßÿ®ÿ™ÿØÿß Ÿàÿßÿ±ÿØ ÿ¥Ÿà€åÿØ' :\n                     language === 'ps' ? 'ŸÖŸáÿ±ÿ®ÿßŸÜŸä Ÿà⁄©⁄ìÿ¶ ŸÑŸàŸÖ⁄ì€å ŸÜŸÜŸà⁄Åÿ¶' :\n                     'Please login first',\n        variant: 'destructive',\n      });\n      navigate('/auth');\n      return;\n    }\n\n    if (!formData.title || !formData.description || !formData.price || !formData.category || !formData.city) {\n      toast({\n        title: language === 'fa' ? 'ÿÆÿ∑ÿß' : language === 'ps' ? 'ÿ™€åÿ±Ÿàÿ™ŸÜŸá' : 'Error',\n        description: language === 'fa' ? 'ŸÑÿ∑ŸÅÿß ÿ™ŸÖÿßŸÖ ŸÅ€åŸÑÿØŸáÿß ÿ±ÿß Ÿæÿ± ⁄©ŸÜ€åÿØ' :\n                     language === 'ps' ? 'ŸÖŸáÿ±ÿ®ÿßŸÜŸä Ÿà⁄©⁄ìÿ¶ ŸºŸàŸÑ ÿ®ÿ±ÿÆ€ê ⁄â⁄© ⁄©⁄ìÿ¶' :\n                     'Please fill all fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    createListingMutation.mutate(formData);\n  };\n\n  const getCategoryName = (cat: typeof categories[number]) => {\n    if (language === 'fa') return cat.nameFA;\n    if (language === 'ps') return cat.namePS;\n    return cat.nameEN;\n  };\n\n  const getCityName = (city: typeof cities[number]) => {\n    if (language === 'fa') return city.nameFA;\n    if (language === 'ps') return city.namePS;\n    return city.nameEN;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" style={{ direction: dir }}>\n      <FixedHeader showBackButton />\n      \n      <div className=\"pt-20 pb-8\">\n        <div className=\"container mx-auto px-4 max-w-2xl\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">\n                {language === 'fa' ? 'ÿ´ÿ®ÿ™ ÿ¢⁄ØŸá€å ÿ¨ÿØ€åÿØ' :\n                 language === 'ps' ? 'ŸÜŸà€å ÿßÿπŸÑÿßŸÜ ÿ´ÿ®ÿ™ ⁄©⁄ìÿ¶' :\n                 'Create New Listing'}\n              </CardTitle>\n              <CardDescription>\n                {language === 'fa' ? 'ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ¢⁄ØŸá€å ÿÆŸàÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ' :\n                 language === 'ps' ? 'ÿØ ÿÆŸæŸÑ ÿßÿπŸÑÿßŸÜ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿØŸÜŸÜŸá ⁄©⁄ìÿ¶' :\n                 'Enter your listing details'}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">\n                    {language === 'fa' ? 'ÿπŸÜŸàÿßŸÜ' : language === 'ps' ? 'ÿ≥ÿ±ŸÑ€å⁄©' : 'Title'}\n                  </Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    placeholder={language === 'fa' ? 'ÿπŸÜŸàÿßŸÜ ÿ¢⁄ØŸá€å ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ' :\n                                language === 'ps' ? 'ÿØ ÿßÿπŸÑÿßŸÜ ÿ≥ÿ±ŸÑ€å⁄© ÿØŸÜŸÜŸá ⁄©⁄ìÿ¶' :\n                                'Enter listing title'}\n                    data-testid=\"input-listing-title\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">\n                    {language === 'fa' ? 'ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™' : language === 'ps' ? 'ÿ™ŸÅÿµ€åŸÑ' : 'Description'}\n                  </Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    placeholder={language === 'fa' ? 'ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™ ⁄©ÿßŸÖŸÑ ÿ¢⁄ØŸá€å ÿÆŸàÿØ ÿ±ÿß ÿ®ŸÜŸà€åÿ≥€åÿØ' :\n                                language === 'ps' ? 'ÿØ ÿÆŸæŸÑ ÿßÿπŸÑÿßŸÜ ÿ®ÿ¥Ÿæ⁄ì ÿ™ŸÅÿµ€åŸÑ ŸàŸÑ€å⁄©ÿ¶' :\n                                'Write complete description'}\n                    rows={5}\n                    data-testid=\"input-listing-description\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"price\">\n                      {language === 'fa' ? 'ŸÇ€åŸÖÿ™ (ÿØŸÑÿßÿ±)' : language === 'ps' ? 'ŸÇ€åŸÖÿ™ (⁄âÿßŸÑÿ±)' : 'Price (USD)'}\n                    </Label>\n                    <Input\n                      id=\"price\"\n                      type=\"number\"\n                      value={formData.price}\n                      onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n                      placeholder=\"0\"\n                      data-testid=\"input-listing-price\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"category\">\n                      {language === 'fa' ? 'ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å' : language === 'ps' ? '⁄©Ÿº⁄´Ÿàÿ±€ç' : 'Category'}\n                    </Label>\n                    <Select value={formData.category} onValueChange={(value) => setFormData({ ...formData, category: value })}>\n                      <SelectTrigger id=\"category\" data-testid=\"select-listing-category\">\n                        <SelectValue placeholder={language === 'fa' ? 'ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ' :\n                                                  language === 'ps' ? 'ÿßŸÜÿ™ÿÆÿßÿ® ⁄©⁄ìÿ¶' :\n                                                  'Select'} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {categories.map(cat => (\n                          <SelectItem key={cat.id} value={cat.id} data-testid={`option-category-${cat.id}`}>\n                            {cat.icon} {getCategoryName(cat)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"city\">\n                    {language === 'fa' ? 'ÿ¥Ÿáÿ±' : language === 'ps' ? '⁄öÿßÿ±' : 'City'}\n                  </Label>\n                  <Select value={formData.city} onValueChange={(value) => setFormData({ ...formData, city: value })}>\n                    <SelectTrigger id=\"city\" data-testid=\"select-listing-city\">\n                      <SelectValue placeholder={language === 'fa' ? 'ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ' :\n                                                language === 'ps' ? 'ÿßŸÜÿ™ÿÆÿßÿ® ⁄©⁄ìÿ¶' :\n                                                'Select'} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {cities.map(city => (\n                        <SelectItem key={city.id} value={city.id} data-testid={`option-city-${city.id}`}>\n                          {city.icon} {getCityName(city)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"imageUrl\">\n                    {language === 'fa' ? 'ŸÑ€åŸÜ⁄© ÿ™ÿµŸà€åÿ± (ÿßÿÆÿ™€åÿßÿ±€å)' :\n                     language === 'ps' ? 'ÿØ ÿßŸÜ⁄ÅŸàÿ± ŸÑ€åŸÜ⁄© (ÿßÿÆÿ™€åÿßÿ±Ÿä)' :\n                     'Image URL (optional)'}\n                  </Label>\n                  <Input\n                    id=\"imageUrl\"\n                    type=\"url\"\n                    value={formData.imageUrl}\n                    onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                    placeholder=\"https://example.com/image.jpg\"\n                    data-testid=\"input-listing-image\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 justify-end\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => navigate('/')}\n                    data-testid=\"button-cancel\"\n                  >\n                    {language === 'fa' ? 'ÿßŸÜÿµÿ±ÿßŸÅ' : language === 'ps' ? 'ŸÑÿ∫ŸàŸá ⁄©ŸàŸÑ' : 'Cancel'}\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createListingMutation.isPending}\n                    data-testid=\"button-create-listing\"\n                  >\n                    {createListingMutation.isPending ? \n                      (language === 'fa' ? 'ÿØÿ± ÿ≠ÿßŸÑ ÿ´ÿ®ÿ™...' :\n                       language === 'ps' ? 'ÿØ ÿ´ÿ®ÿ™ ŸæŸá ÿ≠ÿßŸÑ ⁄©€ê...' :\n                       'Creating...') :\n                      (language === 'fa' ? 'ÿ´ÿ®ÿ™ ÿ¢⁄ØŸá€å' :\n                       language === 'ps' ? 'ÿßÿπŸÑÿßŸÜ ÿ´ÿ®ÿ™ ⁄©⁄ìÿ¶' :\n                       'Create Listing')}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11273},"client/src/pages/DashboardPage.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useLocation } from 'wouter';\nimport { queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport FixedHeader from '@/components/FixedHeader';\nimport { Pencil, Trash2, Plus } from 'lucide-react';\nimport { categories, cities, type Listing } from '@shared/schema';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\n\nexport default function DashboardPage() {\n  const { t, language, dir } = useLanguage();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  const { data: listings, isLoading } = useQuery<Listing[]>({\n    queryKey: ['/api/user', user?.id, 'listings'],\n    enabled: !!user,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/listings/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete listing');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user', user?.id, 'listings'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });\n      toast({\n        title: language === 'fa' ? 'ŸÖŸàŸÅŸÇ€åÿ™' : language === 'ps' ? 'ÿ®ÿ±€åÿßŸÑ€åÿ™Ÿàÿ®' : 'Success',\n        description: language === 'fa' ? 'ÿ¢⁄ØŸá€å ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ' :\n                     language === 'ps' ? 'ÿßÿπŸÑÿßŸÜ ŸæŸá ÿ®ÿ±€åÿßŸÑ€åÿ™Ÿàÿ® ÿ≥ÿ±Ÿá ŸÑÿ±€ê ÿ¥Ÿà' :\n                     'Listing deleted successfully',\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: language === 'fa' ? 'ÿÆÿ∑ÿß' : language === 'ps' ? 'ÿ™€åÿ±Ÿàÿ™ŸÜŸá' : 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const getCategoryName = (categoryId: string) => {\n    const cat = categories.find(c => c.id === categoryId);\n    if (!cat) return categoryId;\n    if (language === 'fa') return cat.nameFA;\n    if (language === 'ps') return cat.namePS;\n    return cat.nameEN;\n  };\n\n  const getCityName = (cityId: string) => {\n    const city = cities.find(c => c.id === cityId);\n    if (!city) return cityId;\n    if (language === 'fa') return city.nameFA;\n    if (language === 'ps') return city.namePS;\n    return city.nameEN;\n  };\n\n  if (!user) {\n    navigate('/auth');\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" style={{ direction: dir }}>\n      <FixedHeader showBackButton />\n      \n      <div className=\"pt-20 pb-8\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-dashboard-title\">\n                {language === 'fa' ? 'ÿ¢⁄ØŸá€å‚ÄåŸáÿß€å ŸÖŸÜ' :\n                 language === 'ps' ? 'ÿ≤ŸÖÿß ÿßÿπŸÑÿßŸÜŸàŸÜŸá' :\n                 'My Listings'}\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">\n                {language === 'fa' ? 'ŸÖÿØ€åÿ±€åÿ™ ÿ¢⁄ØŸá€å‚ÄåŸáÿß€å ÿÆŸàÿØ' :\n                 language === 'ps' ? 'ÿØ ÿÆŸæŸÑŸà ÿßÿπŸÑÿßŸÜÿßÿ™Ÿà ŸÖÿØ€åÿ±€åÿ™' :\n                 'Manage your listings'}\n              </p>\n            </div>\n            <Button onClick={() => navigate('/create-listing')} data-testid=\"button-create-new-listing\">\n              <Plus className=\"w-4 h-4 ltr:mr-2 rtl:ml-2\" />\n              {language === 'fa' ? 'ÿ¢⁄ØŸá€å ÿ¨ÿØ€åÿØ' :\n               language === 'ps' ? 'ŸÜŸà€å ÿßÿπŸÑÿßŸÜ' :\n               'New Listing'}\n            </Button>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {[1, 2, 3].map(i => (\n                <Card key={i} className=\"animate-pulse\">\n                  <div className=\"h-48 bg-muted\" />\n                  <CardContent className=\"p-4 space-y-2\">\n                    <div className=\"h-4 bg-muted rounded w-3/4\" />\n                    <div className=\"h-4 bg-muted rounded w-1/2\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : listings && listings.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {listings.map(listing => (\n                <Card key={listing.id} className=\"overflow-hidden\" data-testid={`card-my-listing-${listing.id}`}>\n                  <div className=\"aspect-[4/3] bg-muted relative overflow-hidden\">\n                    {listing.imageUrl ? (\n                      <img\n                        src={listing.imageUrl}\n                        alt={listing.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-full flex items-center justify-center text-6xl\">\n                        {categories.find(c => c.id === listing.category)?.icon || 'üì¶'}\n                      </div>\n                    )}\n                  </div>\n                  <CardHeader className=\"space-y-2\">\n                    <div className=\"flex items-start justify-between gap-2\">\n                      <CardTitle className=\"text-lg line-clamp-2\" data-testid={`text-listing-title-${listing.id}`}>\n                        {listing.title}\n                      </CardTitle>\n                      <Badge variant=\"secondary\" className=\"shrink-0\">\n                        {getCategoryName(listing.category)}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                      {listing.description}\n                    </p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-2xl font-bold text-primary\" data-testid={`text-listing-price-${listing.id}`}>\n                        ${listing.price.toLocaleString()}\n                      </span>\n                      <Badge variant=\"outline\">\n                        {getCityName(listing.city)}\n                      </Badge>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1\"\n                        onClick={() => navigate(`/edit-listing/${listing.id}`)}\n                        data-testid={`button-edit-${listing.id}`}\n                      >\n                        <Pencil className=\"w-4 h-4 ltr:mr-2 rtl:ml-2\" />\n                        {language === 'fa' ? 'Ÿà€åÿ±ÿß€åÿ¥' :\n                         language === 'ps' ? 'ÿ≥ŸÖŸàŸÜ' :\n                         'Edit'}\n                      </Button>\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1\"\n                            data-testid={`button-delete-${listing.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 ltr:mr-2 rtl:ml-2\" />\n                            {language === 'fa' ? 'ÿ≠ÿ∞ŸÅ' :\n                             language === 'ps' ? 'ŸÑÿ±€ê ⁄©ŸàŸÑ' :\n                             'Delete'}\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>\n                              {language === 'fa' ? 'ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØÿü' :\n                               language === 'ps' ? 'ÿß€åÿß ÿ™ÿßÿ≥Ÿà ⁄âÿß⁄âŸá €åÿßÿ≥ÿ™ÿü' :\n                               'Are you sure?'}\n                            </AlertDialogTitle>\n                            <AlertDialogDescription>\n                              {language === 'fa' ? 'ÿß€åŸÜ ÿπŸÖŸÑ ŸÇÿßÿ®ŸÑ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ŸÜ€åÿ≥ÿ™. ÿ¢⁄ØŸá€å ÿ¥ŸÖÿß ÿ®ÿ±ÿß€å ŸáŸÖ€åÿ¥Ÿá ÿ≠ÿ∞ŸÅ ÿÆŸàÿßŸáÿØ ÿ¥ÿØ.' :\n                               language === 'ps' ? 'ÿØÿß ÿπŸÖŸÑ ÿØ ÿ®€åÿ±ÿ™Ÿá ÿ±ÿß⁄´ÿ±⁄Å€åÿØŸà Ÿà⁄ì ŸÜŸá ÿØ€å. ÿ≥ÿ™ÿßÿ≥Ÿà ÿßÿπŸÑÿßŸÜ ÿØ ÿ™ŸÑ ŸÑŸæÿßÿ±Ÿá ŸÑÿ±€ê ⁄©€å⁄ñŸä.' :\n                               'This action cannot be undone. Your listing will be permanently deleted.'}\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>\n                              {language === 'fa' ? 'ÿßŸÜÿµÿ±ÿßŸÅ' :\n                               language === 'ps' ? 'ŸÑÿ∫ŸàŸá ⁄©ŸàŸÑ' :\n                               'Cancel'}\n                            </AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => deleteMutation.mutate(listing.id)}\n                              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                            >\n                              {language === 'fa' ? 'ÿ≠ÿ∞ŸÅ' :\n                               language === 'ps' ? 'ŸÑÿ±€ê ⁄©ŸàŸÑ' :\n                               'Delete'}\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"p-12 text-center\">\n              <div className=\"space-y-4\">\n                <p className=\"text-xl text-muted-foreground\">\n                  {language === 'fa' ? 'ÿ¥ŸÖÿß ŸáŸÜŸàÿ≤ ÿ¢⁄ØŸá€å ÿ´ÿ®ÿ™ ŸÜ⁄©ÿ±ÿØŸá‚Äåÿß€åÿØ' :\n                   language === 'ps' ? 'ÿ™ÿßÿ≥Ÿà ÿ™ÿ± ÿßŸàÿ≥Ÿá ÿßÿπŸÑÿßŸÜ ÿ´ÿ®ÿ™ ŸÜŸá ÿØ€å ⁄©⁄ì€å' :\n                   'You haven\\'t created any listings yet'}\n                </p>\n                <Button onClick={() => navigate('/create-listing')} data-testid=\"button-create-first-listing\">\n                  <Plus className=\"w-4 h-4 ltr:mr-2 rtl:ml-2\" />\n                  {language === 'fa' ? 'ÿßŸàŸÑ€åŸÜ ÿ¢⁄ØŸá€å ÿÆŸàÿØ ÿ±ÿß ÿ´ÿ®ÿ™ ⁄©ŸÜ€åÿØ' :\n                   language === 'ps' ? 'ÿÆŸæŸÑ ŸÑŸàŸÖ⁄ì€å ÿßÿπŸÑÿßŸÜ ÿ´ÿ®ÿ™ ⁄©⁄ìÿ¶' :\n                   'Create your first listing'}\n                </Button>\n              </div>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11067},"client/src/pages/EditListingPage.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { categories, cities, type Listing } from '@shared/schema';\nimport FixedHeader from '@/components/FixedHeader';\nimport { queryClient } from '@/lib/queryClient';\n\nexport default function EditListingPage() {\n  const { t, language, dir } = useLanguage();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const params = useParams();\n  const listingId = params.id;\n  \n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    price: '',\n    category: '',\n    city: '',\n    imageUrl: '',\n  });\n\n  const { data: listing, isLoading } = useQuery<Listing>({\n    queryKey: ['/api/listings', listingId],\n    enabled: !!listingId,\n  });\n\n  useEffect(() => {\n    if (listing) {\n      setFormData({\n        title: listing.title,\n        description: listing.description,\n        price: listing.price.toString(),\n        category: listing.category,\n        city: listing.city,\n        imageUrl: listing.imageUrl || '',\n      });\n    }\n  }, [listing]);\n\n  const updateListingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(`/api/listings/${listingId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          ...data,\n          price: parseInt(data.price),\n        }),\n      });\n      if (!response.ok) throw new Error('Failed to update listing');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/listings', listingId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/user', user?.id, 'listings'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/listings'] });\n      toast({\n        title: language === 'fa' ? 'ŸÖŸàŸÅŸÇ€åÿ™' : language === 'ps' ? 'ÿ®ÿ±€åÿßŸÑ€åÿ™Ÿàÿ®' : 'Success',\n        description: language === 'fa' ? 'ÿ¢⁄ØŸá€å ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ¥ÿØ' :\n                     language === 'ps' ? 'ÿßÿπŸÑÿßŸÜ ŸæŸá ÿ®ÿ±€åÿßŸÑ€åÿ™Ÿàÿ® ÿ≥ÿ±Ÿá ÿ™ÿßÿ≤Ÿá ÿ¥Ÿà' :\n                     'Listing updated successfully',\n      });\n      navigate('/dashboard');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: language === 'fa' ? 'ÿÆÿ∑ÿß' : language === 'ps' ? 'ÿ™€åÿ±Ÿàÿ™ŸÜŸá' : 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.title || !formData.description || !formData.price || !formData.category || !formData.city) {\n      toast({\n        title: language === 'fa' ? 'ÿÆÿ∑ÿß' : language === 'ps' ? 'ÿ™€åÿ±Ÿàÿ™ŸÜŸá' : 'Error',\n        description: language === 'fa' ? 'ŸÑÿ∑ŸÅÿß ÿ™ŸÖÿßŸÖ ŸÅ€åŸÑÿØŸáÿß ÿ±ÿß Ÿæÿ± ⁄©ŸÜ€åÿØ' :\n                     language === 'ps' ? 'ŸÖŸáÿ±ÿ®ÿßŸÜŸä Ÿà⁄©⁄ìÿ¶ ŸºŸàŸÑ ÿ®ÿ±ÿÆ€ê ⁄â⁄© ⁄©⁄ìÿ¶' :\n                     'Please fill all fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    updateListingMutation.mutate(formData);\n  };\n\n  const getCategoryName = (cat: typeof categories[number]) => {\n    if (language === 'fa') return cat.nameFA;\n    if (language === 'ps') return cat.namePS;\n    return cat.nameEN;\n  };\n\n  const getCityName = (city: typeof cities[number]) => {\n    if (language === 'fa') return city.nameFA;\n    if (language === 'ps') return city.namePS;\n    return city.nameEN;\n  };\n\n  if (!user) {\n    navigate('/auth');\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\" style={{ direction: dir }}>\n        <FixedHeader showBackButton />\n        <div className=\"pt-20 pb-8\">\n          <div className=\"container mx-auto px-4 max-w-2xl\">\n            <Card className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-8 bg-muted rounded w-1/3\" />\n                <div className=\"h-4 bg-muted rounded w-1/2\" />\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"h-10 bg-muted rounded\" />\n                <div className=\"h-32 bg-muted rounded\" />\n                <div className=\"h-10 bg-muted rounded\" />\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\" style={{ direction: dir }}>\n      <FixedHeader showBackButton />\n      \n      <div className=\"pt-20 pb-8\">\n        <div className=\"container mx-auto px-4 max-w-2xl\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">\n                {language === 'fa' ? 'Ÿà€åÿ±ÿß€åÿ¥ ÿ¢⁄ØŸá€å' :\n                 language === 'ps' ? 'ÿßÿπŸÑÿßŸÜ ÿ≥ŸÖŸàŸÜ' :\n                 'Edit Listing'}\n              </CardTitle>\n              <CardDescription>\n                {language === 'fa' ? 'ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ¢⁄ØŸá€å ÿÆŸàÿØ ÿ±ÿß ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ⁄©ŸÜ€åÿØ' :\n                 language === 'ps' ? 'ÿØ ÿÆŸæŸÑ ÿßÿπŸÑÿßŸÜ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ™ÿßÿ≤Ÿá ⁄©⁄ìÿ¶' :\n                 'Update your listing details'}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">\n                    {language === 'fa' ? 'ÿπŸÜŸàÿßŸÜ' : language === 'ps' ? 'ÿ≥ÿ±ŸÑ€å⁄©' : 'Title'}\n                  </Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    data-testid=\"input-edit-title\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">\n                    {language === 'fa' ? 'ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™' : language === 'ps' ? 'ÿ™ŸÅÿµ€åŸÑ' : 'Description'}\n                  </Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    rows={5}\n                    data-testid=\"input-edit-description\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"price\">\n                      {language === 'fa' ? 'ŸÇ€åŸÖÿ™ (ÿØŸÑÿßÿ±)' : language === 'ps' ? 'ŸÇ€åŸÖÿ™ (⁄âÿßŸÑÿ±)' : 'Price (USD)'}\n                    </Label>\n                    <Input\n                      id=\"price\"\n                      type=\"number\"\n                      value={formData.price}\n                      onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n                      data-testid=\"input-edit-price\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"category\">\n                      {language === 'fa' ? 'ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å' : language === 'ps' ? '⁄©Ÿº⁄´Ÿàÿ±€ç' : 'Category'}\n                    </Label>\n                    <Select value={formData.category} onValueChange={(value) => setFormData({ ...formData, category: value })}>\n                      <SelectTrigger id=\"category\" data-testid=\"select-edit-category\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {categories.map(cat => (\n                          <SelectItem key={cat.id} value={cat.id}>\n                            {cat.icon} {getCategoryName(cat)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"city\">\n                    {language === 'fa' ? 'ÿ¥Ÿáÿ±' : language === 'ps' ? '⁄öÿßÿ±' : 'City'}\n                  </Label>\n                  <Select value={formData.city} onValueChange={(value) => setFormData({ ...formData, city: value })}>\n                    <SelectTrigger id=\"city\" data-testid=\"select-edit-city\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {cities.map(city => (\n                        <SelectItem key={city.id} value={city.id}>\n                          {city.icon} {getCityName(city)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"imageUrl\">\n                    {language === 'fa' ? 'ŸÑ€åŸÜ⁄© ÿ™ÿµŸà€åÿ± (ÿßÿÆÿ™€åÿßÿ±€å)' :\n                     language === 'ps' ? 'ÿØ ÿßŸÜ⁄ÅŸàÿ± ŸÑ€åŸÜ⁄© (ÿßÿÆÿ™€åÿßÿ±Ÿä)' :\n                     'Image URL (optional)'}\n                  </Label>\n                  <Input\n                    id=\"imageUrl\"\n                    type=\"url\"\n                    value={formData.imageUrl}\n                    onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                    data-testid=\"input-edit-image\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 justify-end\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => navigate('/dashboard')}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    {language === 'fa' ? 'ÿßŸÜÿµÿ±ÿßŸÅ' : language === 'ps' ? 'ŸÑÿ∫ŸàŸá ⁄©ŸàŸÑ' : 'Cancel'}\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={updateListingMutation.isPending}\n                    data-testid=\"button-update-listing\"\n                  >\n                    {updateListingMutation.isPending ?\n                      (language === 'fa' ? 'ÿØÿ± ÿ≠ÿßŸÑ ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å...' :\n                       language === 'ps' ? 'ÿØ ÿ™ÿßÿ≤Ÿá ⁄©ŸàŸÑŸà ŸæŸá ÿ≠ÿßŸÑ ⁄©€ê...' :\n                       'Updating...') :\n                      (language === 'fa' ? 'ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å' :\n                       language === 'ps' ? 'ÿ™ÿßÿ≤Ÿá ⁄©ŸàŸÑ' :\n                       'Update')}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11279}},"version":1}